<?php declare(strict_types=1);
/**
 * This file is automatic generated by build_docs.php file
 * and is used only for autocomplete in multiple IDE
 * don't modify manually.
 */

namespace danog\MadelineProto;

interface auth
{
    /**
     *
     *
     * Parameters:
     * * `string`       **phone_number** -
     * * `int`          **api_id**       -
     * * `string`       **api_hash**     -
     * * `CodeSettings` **settings**     -.
     *
     * @param array $params Parameters
     *
     * @return auth.SentCode
     */
    public function sendCode($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_number**    -
     * * `string` **phone_code_hash** -
     * * `string` **first_name**      -
     * * `string` **last_name**       -.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function signUp($params);

    /**
     *
     *
     * Parameters:
     * * `string`            **phone_number**       -
     * * `string`            **phone_code_hash**    -
     * * `string`            **phone_code**         - Optional:
     * * `EmailVerification` **email_verification** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function signIn($params);

    /**
     *
     *
     * @return auth.LoggedOut
     */
    public function logOut();

    /**
     *
     *
     * @return bool
     */
    public function resetAuthorizations();

    /**
     *
     *
     * Parameters:
     * * `int` **dc_id** -.
     *
     * @param array $params Parameters
     *
     * @return auth.ExportedAuthorization
     */
    public function exportAuthorization($params);

    /**
     *
     *
     * Parameters:
     * * `long`  **id**    -
     * * `bytes` **bytes** -.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function importAuthorization($params);

    /**
     *
     *
     * Parameters:
     * * `long`  **perm_auth_key_id**  -
     * * `long`  **nonce**             -
     * * `int`   **expires_at**        -
     * * `bytes` **encrypted_message** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function bindTempAuthKey($params);

    /**
     *
     *
     * Parameters:
     * * `int`    **api_id**         -
     * * `string` **api_hash**       -
     * * `string` **bot_auth_token** -.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function importBotAuthorization($params);

    /**
     *
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** -.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function checkPassword($params);

    /**
     *
     *
     * @return auth.PasswordRecovery
     */
    public function requestPasswordRecovery();

    /**
     *
     *
     * Parameters:
     * * `string`                        **code**         -
     * * `account.PasswordInputSettings` **new_settings** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function recoverPassword($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_number**    -
     * * `string` **phone_code_hash** -.
     *
     * @param array $params Parameters
     *
     * @return auth.SentCode
     */
    public function resendCode($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_number**    -
     * * `string` **phone_code_hash** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function cancelCode($params);

    /**
     *
     *
     * Parameters:
     * * `[long]` **except_auth_keys** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function dropTempAuthKeys($params);

    /**
     *
     *
     * Parameters:
     * * `int`    **api_id**     -
     * * `string` **api_hash**   -
     * * `[long]` **except_ids** -.
     *
     * @param array $params Parameters
     *
     * @return auth.LoginToken
     */
    public function exportLoginToken($params);

    /**
     *
     *
     * Parameters:
     * * `bytes` **token** -.
     *
     * @param array $params Parameters
     *
     * @return auth.LoginToken
     */
    public function importLoginToken($params);

    /**
     *
     *
     * Parameters:
     * * `bytes` **token** -.
     *
     * @param array $params Parameters
     *
     * @return Authorization
     */
    public function acceptLoginToken($params);

    /**
     *
     *
     * Parameters:
     * * `string` **code** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function checkRecoveryPassword($params);

    /**
     *
     *
     * Parameters:
     * * `int`    **api_id**         -
     * * `string` **api_hash**       -
     * * `string` **web_auth_token** -.
     *
     * @param array $params Parameters
     *
     * @return auth.Authorization
     */
    public function importWebTokenAuthorization($params);
}

interface account
{
    /**
     *
     *
     * Parameters:
     * * `boolean` **no_muted**    - Optional:
     * * `int`     **token_type**  -
     * * `string`  **token**       -
     * * `Bool`    **app_sandbox** -
     * * `bytes`   **secret**      -
     * * `[long]`  **other_uids**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function registerDevice($params);

    /**
     *
     *
     * Parameters:
     * * `int`    **token_type** -
     * * `string` **token**      -
     * * `[long]` **other_uids** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function unregisterDevice($params);

    /**
     *
     *
     * Parameters:
     * * `InputNotifyPeer`         **peer**     -
     * * `InputPeerNotifySettings` **settings** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateNotifySettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputNotifyPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return PeerNotifySettings
     */
    public function getNotifySettings($params);

    /**
     *
     *
     * @return bool
     */
    public function resetNotifySettings();

    /**
     *
     *
     * Parameters:
     * * `string` **first_name** - Optional:
     * * `string` **last_name**  - Optional:
     * * `string` **about**      - Optional:.
     *
     * @param array $params Parameters
     *
     * @return User
     */
    public function updateProfile($params);

    /**
     *
     *
     * Parameters:
     * * `Bool` **offline** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateStatus($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return account.WallPapers
     */
    public function getWallPapers($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`    **peer**    -
     * * `ReportReason` **reason**  -
     * * `string`       **message** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportPeer($params);

    /**
     *
     *
     * Parameters:
     * * `string` **username** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function checkUsername($params);

    /**
     *
     *
     * Parameters:
     * * `string` **username** -.
     *
     * @param array $params Parameters
     *
     * @return User
     */
    public function updateUsername($params);

    /**
     *
     *
     * Parameters:
     * * `InputPrivacyKey` **key** -.
     *
     * @param array $params Parameters
     *
     * @return account.PrivacyRules
     */
    public function getPrivacy($params);

    /**
     *
     *
     * Parameters:
     * * `InputPrivacyKey`    **key**   -
     * * `[InputPrivacyRule]` **rules** -.
     *
     * @param array $params Parameters
     *
     * @return account.PrivacyRules
     */
    public function setPrivacy($params);

    /**
     *
     *
     * Parameters:
     * * `string`                **reason**   -
     * * `InputCheckPasswordSRP` **password** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteAccount($params);

    /**
     *
     *
     * @return AccountDaysTTL
     */
    public function getAccountTTL();

    /**
     *
     *
     * Parameters:
     * * `AccountDaysTTL` **ttl** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setAccountTTL($params);

    /**
     *
     *
     * Parameters:
     * * `string`       **phone_number** -
     * * `CodeSettings` **settings**     -.
     *
     * @param array $params Parameters
     *
     * @return auth.SentCode
     */
    public function sendChangePhoneCode($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_number**    -
     * * `string` **phone_code_hash** -
     * * `string` **phone_code**      -.
     *
     * @param array $params Parameters
     *
     * @return User
     */
    public function changePhone($params);

    /**
     *
     *
     * Parameters:
     * * `int` **period** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateDeviceLocked($params);

    /**
     *
     *
     * @return account.Authorizations
     */
    public function getAuthorizations();

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function resetAuthorization($params);

    /**
     *
     *
     * @return account.Password
     */
    public function getPassword();

    /**
     *
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** -.
     *
     * @param array $params Parameters
     *
     * @return account.PasswordSettings
     */
    public function getPasswordSettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputCheckPasswordSRP`         **password**     -
     * * `account.PasswordInputSettings` **new_settings** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updatePasswordSettings($params);

    /**
     *
     *
     * Parameters:
     * * `string`       **hash**     -
     * * `CodeSettings` **settings** -.
     *
     * @param array $params Parameters
     *
     * @return auth.SentCode
     */
    public function sendConfirmPhoneCode($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_code_hash** -
     * * `string` **phone_code**      -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function confirmPhone($params);

    /**
     *
     *
     * Parameters:
     * * `InputCheckPasswordSRP` **password** -
     * * `int`                   **period**   -.
     *
     * @param array $params Parameters
     *
     * @return account.TmpPassword
     */
    public function getTmpPassword($params);

    /**
     *
     *
     * @return account.WebAuthorizations
     */
    public function getWebAuthorizations();

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function resetWebAuthorization($params);

    /**
     *
     *
     * @return bool
     */
    public function resetWebAuthorizations();

    /**
     *
     *
     * @return  of SecureValue[]
     */
    public function getAllSecureValues();

    /**
     *
     *
     * Parameters:
     * * `[SecureValueType]` **types** -.
     *
     * @param array $params Parameters
     *
     * @return  of SecureValue[]
     */
    public function getSecureValue($params);

    /**
     *
     *
     * Parameters:
     * * `InputSecureValue` **value**            -
     * * `long`             **secure_secret_id** -.
     *
     * @param array $params Parameters
     *
     * @return SecureValue
     */
    public function saveSecureValue($params);

    /**
     *
     *
     * Parameters:
     * * `[SecureValueType]` **types** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteSecureValue($params);

    /**
     *
     *
     * Parameters:
     * * `long`   **bot_id**     -
     * * `string` **scope**      -
     * * `string` **public_key** -.
     *
     * @param array $params Parameters
     *
     * @return account.AuthorizationForm
     */
    public function getAuthorizationForm($params);

    /**
     *
     *
     * Parameters:
     * * `long`                       **bot_id**       -
     * * `string`                     **scope**        -
     * * `string`                     **public_key**   -
     * * `[SecureValueHash]`          **value_hashes** -
     * * `SecureCredentialsEncrypted` **credentials**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function acceptAuthorization($params);

    /**
     *
     *
     * Parameters:
     * * `string`       **phone_number** -
     * * `CodeSettings` **settings**     -.
     *
     * @param array $params Parameters
     *
     * @return auth.SentCode
     */
    public function sendVerifyPhoneCode($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone_number**    -
     * * `string` **phone_code_hash** -
     * * `string` **phone_code**      -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function verifyPhone($params);

    /**
     *
     *
     * Parameters:
     * * `EmailVerifyPurpose` **purpose** -
     * * `string`             **email**   -.
     *
     * @param array $params Parameters
     *
     * @return account.SentEmailCode
     */
    public function sendVerifyEmailCode($params);

    /**
     *
     *
     * Parameters:
     * * `EmailVerifyPurpose` **purpose**      -
     * * `EmailVerification`  **verification** -.
     *
     * @param array $params Parameters
     *
     * @return account.EmailVerified
     */
    public function verifyEmail($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **contacts**           - Optional:
     * * `boolean` **message_users**      - Optional:
     * * `boolean` **message_chats**      - Optional:
     * * `boolean` **message_megagroups** - Optional:
     * * `boolean` **message_channels**   - Optional:
     * * `boolean` **files**              - Optional:
     * * `long`    **file_max_size**      - Optional:.
     *
     * @param array $params Parameters
     *
     * @return account.Takeout
     */
    public function initTakeoutSession($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **success** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function finishTakeoutSession($params);

    /**
     *
     *
     * Parameters:
     * * `string` **code** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function confirmPasswordEmail($params);

    /**
     *
     *
     * @return bool
     */
    public function resendPasswordEmail();

    /**
     *
     *
     * @return bool
     */
    public function cancelPasswordEmail();

    /**
     *
     *
     * @return bool
     */
    public function getContactSignUpNotification();

    /**
     *
     *
     * Parameters:
     * * `Bool` **silent** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setContactSignUpNotification($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **compare_sound** - Optional:
     * * `InputNotifyPeer` **peer**          - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getNotifyExceptions($params);

    /**
     *
     *
     * Parameters:
     * * `InputWallPaper` **wallpaper** -.
     *
     * @param array $params Parameters
     *
     * @return WallPaper
     */
    public function getWallPaper($params);

    /**
     *
     *
     * Parameters:
     * * `InputFile`         **file**      -
     * * `string`            **mime_type** -
     * * `WallPaperSettings` **settings**  -.
     *
     * @param array $params Parameters
     *
     * @return WallPaper
     */
    public function uploadWallPaper($params);

    /**
     *
     *
     * Parameters:
     * * `InputWallPaper`    **wallpaper** -
     * * `Bool`              **unsave**    -
     * * `WallPaperSettings` **settings**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveWallPaper($params);

    /**
     *
     *
     * Parameters:
     * * `InputWallPaper`    **wallpaper** -
     * * `WallPaperSettings` **settings**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function installWallPaper($params);

    /**
     *
     *
     * @return bool
     */
    public function resetWallPapers();

    /**
     *
     *
     * @return account.AutoDownloadSettings
     */
    public function getAutoDownloadSettings();

    /**
     *
     *
     * Parameters:
     * * `boolean`              **low**      - Optional:
     * * `boolean`              **high**     - Optional:
     * * `AutoDownloadSettings` **settings** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveAutoDownloadSettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputFile` **file**      -
     * * `InputFile` **thumb**     - Optional:
     * * `string`    **file_name** -
     * * `string`    **mime_type** -.
     *
     * @param array $params Parameters
     *
     * @return Document
     */
    public function uploadTheme($params);

    /**
     *
     *
     * Parameters:
     * * `string`               **slug**     -
     * * `string`               **title**    -
     * * `InputDocument`        **document** - Optional:
     * * `[InputThemeSettings]` **settings** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Theme
     */
    public function createTheme($params);

    /**
     *
     *
     * Parameters:
     * * `string`               **format**   -
     * * `InputTheme`           **theme**    -
     * * `string`               **slug**     - Optional:
     * * `string`               **title**    - Optional:
     * * `InputDocument`        **document** - Optional:
     * * `[InputThemeSettings]` **settings** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Theme
     */
    public function updateTheme($params);

    /**
     *
     *
     * Parameters:
     * * `InputTheme` **theme**  -
     * * `Bool`       **unsave** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveTheme($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`    **dark**       - Optional:
     * * `InputTheme` **theme**      - Optional:
     * * `string`     **format**     - Optional:
     * * `BaseTheme`  **base_theme** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function installTheme($params);

    /**
     *
     *
     * Parameters:
     * * `string`     **format** -
     * * `InputTheme` **theme**  -.
     *
     * @param array $params Parameters
     *
     * @return Theme
     */
    public function getTheme($params);

    /**
     *
     *
     * Parameters:
     * * `string` **format** -
     * * `long`   **hash**   -.
     *
     * @param array $params Parameters
     *
     * @return account.Themes
     */
    public function getThemes($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **sensitive_enabled** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setContentSettings($params);

    /**
     *
     *
     * @return account.ContentSettings
     */
    public function getContentSettings();

    /**
     *
     *
     * Parameters:
     * * `[InputWallPaper]` **wallpapers** -.
     *
     * @param array $params Parameters
     *
     * @return  of WallPaper[]
     */
    public function getMultiWallPapers($params);

    /**
     *
     *
     * @return GlobalPrivacySettings
     */
    public function getGlobalPrivacySettings();

    /**
     *
     *
     * Parameters:
     * * `GlobalPrivacySettings` **settings** -.
     *
     * @param array $params Parameters
     *
     * @return GlobalPrivacySettings
     */
    public function setGlobalPrivacySettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`    **peer**     -
     * * `InputPhoto`   **photo_id** -
     * * `ReportReason` **reason**   -
     * * `string`       **message**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportProfilePhoto($params);

    /**
     *
     *
     * @return account.ResetPasswordResult
     */
    public function resetPassword();

    /**
     *
     *
     * @return bool
     */
    public function declinePasswordReset();

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return account.Themes
     */
    public function getChatThemes($params);

    /**
     *
     *
     * Parameters:
     * * `int` **authorization_ttl_days** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setAuthorizationTTL($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash**                        -
     * * `Bool` **encrypted_requests_disabled** - Optional:
     * * `Bool` **call_requests_disabled**      - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function changeAuthorizationSettings($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return account.SavedRingtones
     */
    public function getSavedRingtones($params);

    /**
     *
     *
     * Parameters:
     * * `InputDocument` **id**     -
     * * `Bool`          **unsave** -.
     *
     * @param array $params Parameters
     *
     * @return account.SavedRingtone
     */
    public function saveRingtone($params);

    /**
     *
     *
     * Parameters:
     * * `InputFile` **file**      -
     * * `string`    **file_name** -
     * * `string`    **mime_type** -.
     *
     * @param array $params Parameters
     *
     * @return Document
     */
    public function uploadRingtone($params);

    /**
     *
     *
     * Parameters:
     * * `EmojiStatus` **emoji_status** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateEmojiStatus($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return account.EmojiStatuses
     */
    public function getDefaultEmojiStatuses($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return account.EmojiStatuses
     */
    public function getRecentEmojiStatuses($params);

    /**
     *
     *
     * @return bool
     */
    public function clearRecentEmojiStatuses();

    /**
     *
     *
     * Parameters:
     * * `[string]` **order** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reorderUsernames($params);

    /**
     *
     *
     * Parameters:
     * * `string` **username** -
     * * `Bool`   **active**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleUsername($params);
}

interface users
{
    /**
     *
     *
     * Parameters:
     * * `[InputUser]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return  of User[]
     */
    public function getUsers($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **id** -.
     *
     * @param array $params Parameters
     *
     * @return users.UserFull
     */
    public function getFullUser($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser`          **id**     -
     * * `[SecureValueError]` **errors** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setSecureValueErrors($params);
}

interface contacts
{
    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return  of int[]
     */
    public function getContactIDs($params);

    /**
     *
     *
     * @return  of ContactStatus[]
     */
    public function getStatuses();

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return contacts.Contacts
     */
    public function getContacts($params);

    /**
     *
     *
     * Parameters:
     * * `[InputContact]` **contacts** -.
     *
     * @param array $params Parameters
     *
     * @return contacts.ImportedContacts
     */
    public function importContacts($params);

    /**
     *
     *
     * Parameters:
     * * `[InputUser]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteContacts($params);

    /**
     *
     *
     * Parameters:
     * * `[string]` **phones** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteByPhones($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function block($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function unblock($params);

    /**
     *
     *
     * Parameters:
     * * `int` **offset** -
     * * `int` **limit**  -.
     *
     * @param array $params Parameters
     *
     * @return contacts.Blocked
     */
    public function getBlocked($params);

    /**
     *
     *
     * Parameters:
     * * `string` **q**     -
     * * `int`    **limit** -.
     *
     * @param array $params Parameters
     *
     * @return contacts.Found
     */
    public function search($params);

    /**
     *
     *
     * Parameters:
     * * `string` **username** -.
     *
     * @param array $params Parameters
     *
     * @return contacts.ResolvedPeer
     */
    public function resolveUsername($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **correspondents** - Optional:
     * * `boolean` **bots_pm**        - Optional:
     * * `boolean` **bots_inline**    - Optional:
     * * `boolean` **phone_calls**    - Optional:
     * * `boolean` **forward_users**  - Optional:
     * * `boolean` **forward_chats**  - Optional:
     * * `boolean` **groups**         - Optional:
     * * `boolean` **channels**       - Optional:
     * * `int`     **offset**         -
     * * `int`     **limit**          -
     * * `long`    **hash**           -.
     *
     * @param array $params Parameters
     *
     * @return contacts.TopPeers
     */
    public function getTopPeers($params);

    /**
     *
     *
     * Parameters:
     * * `TopPeerCategory` **category** -
     * * `InputPeer`       **peer**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function resetTopPeerRating($params);

    /**
     *
     *
     * @return bool
     */
    public function resetSaved();

    /**
     *
     *
     * @return  of SavedContact[]
     */
    public function getSaved();

    /**
     *
     *
     * Parameters:
     * * `Bool` **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleTopPeers($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **add_phone_privacy_exception** - Optional:
     * * `InputUser` **id**                          -
     * * `string`    **first_name**                  -
     * * `string`    **last_name**                   -
     * * `string`    **phone**                       -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function addContact($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function acceptContact($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`       **background**   - Optional:
     * * `InputGeoPoint` **geo_point**    -
     * * `int`           **self_expires** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getLocated($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **delete_message** - Optional:
     * * `boolean` **delete_history** - Optional:
     * * `boolean` **report_spam**    - Optional:
     * * `int`     **msg_id**         -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function blockFromReplies($params);

    /**
     *
     *
     * Parameters:
     * * `string` **phone** -.
     *
     * @param array $params Parameters
     *
     * @return contacts.ResolvedPeer
     */
    public function resolvePhone($params);

    /**
     *
     *
     * @return ExportedContactToken
     */
    public function exportContactToken();

    /**
     *
     *
     * Parameters:
     * * `string` **token** -.
     *
     * @param array $params Parameters
     *
     * @return User
     */
    public function importContactToken($params);
}

interface messages
{
    /**
     *
     *
     * Parameters:
     * * `[InputMessage]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getMessages($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **exclude_pinned** - Optional:
     * * `int`       **folder_id**      - Optional:
     * * `int`       **offset_date**    -
     * * `int`       **offset_id**      -
     * * `InputPeer` **offset_peer**    -
     * * `int`       **limit**          -
     * * `long`      **hash**           -.
     *
     * @param array $params Parameters
     *
     * @return messages.Dialogs
     */
    public function getDialogs($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**        -
     * * `int`       **offset_id**   -
     * * `int`       **offset_date** -
     * * `int`       **add_offset**  -
     * * `int`       **limit**       -
     * * `int`       **max_id**      -
     * * `int`       **min_id**      -
     * * `long`      **hash**        -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getHistory($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`      **peer**       -
     * * `string`         **q**          -
     * * `InputPeer`      **from_id**    - Optional:
     * * `int`            **top_msg_id** - Optional:
     * * `MessagesFilter` **filter**     -
     * * `int`            **min_date**   -
     * * `int`            **max_date**   -
     * * `int`            **offset_id**  -
     * * `int`            **add_offset** -
     * * `int`            **limit**      -
     * * `int`            **max_id**     -
     * * `int`            **min_id**     -
     * * `long`           **hash**       -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function search($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **max_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedMessages
     */
    public function readHistory($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **just_clear** - Optional:
     * * `boolean`   **revoke**     - Optional:
     * * `InputPeer` **peer**       -
     * * `int`       **max_id**     -
     * * `int`       **min_date**   - Optional:
     * * `int`       **max_date**   - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function deleteHistory($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **revoke** - Optional:
     * * `[int]`   **id**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedMessages
     */
    public function deleteMessages($params);

    /**
     *
     *
     * Parameters:
     * * `int` **max_id** -.
     *
     * @param array $params Parameters
     *
     * @return  of ReceivedNotifyMessage[]
     */
    public function receivedMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`         **peer**       -
     * * `int`               **top_msg_id** - Optional:
     * * `SendMessageAction` **action**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setTyping($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **no_webpage**               - Optional:
     * * `boolean`         **silent**                   - Optional:
     * * `boolean`         **background**               - Optional:
     * * `boolean`         **clear_draft**              - Optional:
     * * `boolean`         **noforwards**               - Optional:
     * * `boolean`         **update_stickersets_order** - Optional:
     * * `InputPeer`       **peer**                     -
     * * `int`             **reply_to_msg_id**          - Optional:
     * * `int`             **top_msg_id**               - Optional:
     * * `string`          **message**                  -
     * * `ReplyMarkup`     **reply_markup**             - Optional:
     * * `[MessageEntity]` **entities**                 - Optional:
     * * `int`             **schedule_date**            - Optional:
     * * `InputPeer`       **send_as**                  - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendMessage($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **silent**                   - Optional:
     * * `boolean`         **background**               - Optional:
     * * `boolean`         **clear_draft**              - Optional:
     * * `boolean`         **noforwards**               - Optional:
     * * `boolean`         **update_stickersets_order** - Optional:
     * * `InputPeer`       **peer**                     -
     * * `int`             **reply_to_msg_id**          - Optional:
     * * `int`             **top_msg_id**               - Optional:
     * * `InputMedia`      **media**                    -
     * * `string`          **message**                  -
     * * `ReplyMarkup`     **reply_markup**             - Optional:
     * * `[MessageEntity]` **entities**                 - Optional:
     * * `int`             **schedule_date**            - Optional:
     * * `InputPeer`       **send_as**                  - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendMedia($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **silent**              - Optional:
     * * `boolean`   **background**          - Optional:
     * * `boolean`   **with_my_score**       - Optional:
     * * `boolean`   **drop_author**         - Optional:
     * * `boolean`   **drop_media_captions** - Optional:
     * * `boolean`   **noforwards**          - Optional:
     * * `InputPeer` **from_peer**           -
     * * `[int]`     **id**                  -
     * * `InputPeer` **to_peer**             -
     * * `int`       **top_msg_id**          - Optional:
     * * `int`       **schedule_date**       - Optional:
     * * `InputPeer` **send_as**             - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function forwardMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportSpam($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return messages.PeerSettings
     */
    public function getPeerSettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`    **peer**    -
     * * `[int]`        **id**      -
     * * `ReportReason` **reason**  -
     * * `string`       **message** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function report($params);

    /**
     *
     *
     * Parameters:
     * * `[long]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getChats($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.ChatFull
     */
    public function getFullChat($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id** -
     * * `string`    **title**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editChatTitle($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`      **chat_id** -
     * * `InputChatPhoto` **photo**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editChatPhoto($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id**   -
     * * `InputUser` **user_id**   -
     * * `int`       **fwd_limit** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function addChatUser($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **revoke_history** - Optional:
     * * `InputPeer` **chat_id**        -
     * * `InputUser` **user_id**        -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteChatUser($params);

    /**
     *
     *
     * Parameters:
     * * `[InputUser]` **users**      -
     * * `string`      **title**      -
     * * `int`         **ttl_period** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function createChat($params);

    /**
     *
     *
     * Parameters:
     * * `int` **version**       -
     * * `int` **random_length** -.
     *
     * @param array $params Parameters
     *
     * @return messages.DhConfig
     */
    public function getDhConfig($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **user_id** -
     * * `bytes`     **g_a**     -.
     *
     * @param array $params Parameters
     *
     * @return EncryptedChat
     */
    public function requestEncryption($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**            -
     * * `bytes`              **g_b**             -
     * * `long`               **key_fingerprint** -.
     *
     * @param array $params Parameters
     *
     * @return EncryptedChat
     */
    public function acceptEncryption($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **delete_history** - Optional:
     * * `int`     **chat_id**        -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function discardEncryption($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**   -
     * * `Bool`               **typing** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setEncryptedTyping($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**     -
     * * `int`                **max_date** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function readEncryptedHistory($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`            **silent**  - Optional:
     * * `InputEncryptedChat` **peer**    -
     * * `DecryptedMessage`   **message** -.
     *
     * @param array $params Parameters
     *
     * @return messages.SentEncryptedMessage
     */
    public function sendEncrypted($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`            **silent**  - Optional:
     * * `InputEncryptedChat` **peer**    -
     * * `DecryptedMessage`   **message** -
     * * `InputEncryptedFile` **file**    -.
     *
     * @param array $params Parameters
     *
     * @return messages.SentEncryptedMessage
     */
    public function sendEncryptedFile($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer**    -
     * * `DecryptedMessage`   **message** -.
     *
     * @param array $params Parameters
     *
     * @return messages.SentEncryptedMessage
     */
    public function sendEncryptedService($params);

    /**
     *
     *
     * Parameters:
     * * `int` **max_qts** -.
     *
     * @param array $params Parameters
     *
     * @return  of long[]
     */
    public function receivedQueue($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportEncryptedSpam($params);

    /**
     *
     *
     * Parameters:
     * * `[int]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedMessages
     */
    public function readMessageContents($params);

    /**
     *
     *
     * Parameters:
     * * `string` **emoticon** -
     * * `long`   **hash**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.Stickers
     */
    public function getStickers($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AllStickers
     */
    public function getAllStickers($params);

    /**
     *
     *
     * Parameters:
     * * `string`          **message**  -
     * * `[MessageEntity]` **entities** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return MessageMedia
     */
    public function getWebPagePreview($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **legacy_revoke_permanent** - Optional:
     * * `boolean`   **request_needed**          - Optional:
     * * `InputPeer` **peer**                    -
     * * `int`       **expire_date**             - Optional:
     * * `int`       **usage_limit**             - Optional:
     * * `string`    **title**                   - Optional:.
     *
     * @param array $params Parameters
     *
     * @return ExportedChatInvite
     */
    public function exportChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `string` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return ChatInvite
     */
    public function checkChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `string` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function importChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** -
     * * `[int]`           **hash**       - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function getStickerSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** -
     * * `Bool`            **archived**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSetInstallResult
     */
    public function installStickerSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function uninstallStickerSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **bot**         -
     * * `InputPeer` **peer**        -
     * * `string`    **start_param** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function startBot($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**      -
     * * `[int]`     **id**        -
     * * `Bool`      **increment** -.
     *
     * @param array $params Parameters
     *
     * @return messages.MessageViews
     */
    public function getMessagesViews($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id**  -
     * * `InputUser` **user_id**  -
     * * `Bool`      **is_admin** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function editChatAdmin($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function migrateChat($params);

    /**
     *
     *
     * Parameters:
     * * `int`            **folder_id**   - Optional:
     * * `string`         **q**           -
     * * `MessagesFilter` **filter**      -
     * * `int`            **min_date**    -
     * * `int`            **max_date**    -
     * * `int`            **offset_rate** -
     * * `InputPeer`      **offset_peer** -
     * * `int`            **offset_id**   -
     * * `int`            **limit**       -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function searchGlobal($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **masks**  - Optional:
     * * `boolean` **emojis** - Optional:
     * * `[long]`  **order**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reorderStickerSets($params);

    /**
     *
     *
     * Parameters:
     * * `bytes`  **sha256**    -
     * * `long`   **size**      -
     * * `string` **mime_type** -.
     *
     * @param array $params Parameters
     *
     * @return Document
     */
    public function getDocumentByHash($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.SavedGifs
     */
    public function getSavedGifs($params);

    /**
     *
     *
     * Parameters:
     * * `InputDocument` **id**     -
     * * `Bool`          **unsave** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveGif($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser`     **bot**       -
     * * `InputPeer`     **peer**      -
     * * `InputGeoPoint` **geo_point** - Optional:
     * * `string`        **query**     -
     * * `string`        **offset**    -.
     *
     * @param array $params Parameters
     *
     * @return messages.BotResults
     */
    public function getInlineBotResults($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`                **gallery**     - Optional:
     * * `boolean`                **private**     - Optional:
     * * `long`                   **query_id**    -
     * * `[InputBotInlineResult]` **results**     -
     * * `int`                    **cache_time**  -
     * * `string`                 **next_offset** - Optional:
     * * `InlineBotSwitchPM`      **switch_pm**   - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setInlineBotResults($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **silent**          - Optional:
     * * `boolean`   **background**      - Optional:
     * * `boolean`   **clear_draft**     - Optional:
     * * `boolean`   **hide_via**        - Optional:
     * * `InputPeer` **peer**            -
     * * `int`       **reply_to_msg_id** - Optional:
     * * `int`       **top_msg_id**      - Optional:
     * * `long`      **query_id**        -
     * * `string`    **id**              -
     * * `int`       **schedule_date**   - Optional:
     * * `InputPeer` **send_as**         - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendInlineBotResult($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `int`       **id**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.MessageEditData
     */
    public function getMessageEditData($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **no_webpage**    - Optional:
     * * `InputPeer`       **peer**          -
     * * `int`             **id**            -
     * * `string`          **message**       - Optional:
     * * `InputMedia`      **media**         - Optional:
     * * `ReplyMarkup`     **reply_markup**  - Optional:
     * * `[MessageEntity]` **entities**      - Optional:
     * * `int`             **schedule_date** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editMessage($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`                 **no_webpage**   - Optional:
     * * `InputBotInlineMessageID` **id**           -
     * * `string`                  **message**      - Optional:
     * * `InputMedia`              **media**        - Optional:
     * * `ReplyMarkup`             **reply_markup** - Optional:
     * * `[MessageEntity]`         **entities**     - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function editInlineBotMessage($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`               **game**     - Optional:
     * * `InputPeer`             **peer**     -
     * * `int`                   **msg_id**   -
     * * `bytes`                 **data**     - Optional:
     * * `InputCheckPasswordSRP` **password** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.BotCallbackAnswer
     */
    public function getBotCallbackAnswer($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **alert**      - Optional:
     * * `long`    **query_id**   -
     * * `string`  **message**    - Optional:
     * * `string`  **url**        - Optional:
     * * `int`     **cache_time** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotCallbackAnswer($params);

    /**
     *
     *
     * Parameters:
     * * `[InputDialogPeer]` **peers** -.
     *
     * @param array $params Parameters
     *
     * @return messages.PeerDialogs
     */
    public function getPeerDialogs($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **no_webpage**      - Optional:
     * * `int`             **reply_to_msg_id** - Optional:
     * * `int`             **top_msg_id**      - Optional:
     * * `InputPeer`       **peer**            -
     * * `string`          **message**         -
     * * `[MessageEntity]` **entities**        - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveDraft($params);

    /**
     *
     *
     * @return Updates
     */
    public function getAllDrafts();

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.FeaturedStickers
     */
    public function getFeaturedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `[long]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function readFeaturedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **attached** - Optional:
     * * `long`    **hash**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.RecentStickers
     */
    public function getRecentStickers($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`       **attached** - Optional:
     * * `InputDocument` **id**       -
     * * `Bool`          **unsave**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveRecentSticker($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **attached** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function clearRecentStickers($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **masks**     - Optional:
     * * `boolean` **emojis**    - Optional:
     * * `long`    **offset_id** -
     * * `int`     **limit**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.ArchivedStickers
     */
    public function getArchivedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AllStickers
     */
    public function getMaskStickers($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickeredMedia` **media** -.
     *
     * @param array $params Parameters
     *
     * @return  of StickerSetCovered[]
     */
    public function getAttachedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **edit_message** - Optional:
     * * `boolean`   **force**        - Optional:
     * * `InputPeer` **peer**         -
     * * `int`       **id**           -
     * * `InputUser` **user_id**      -
     * * `int`       **score**        -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function setGameScore($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`                 **edit_message** - Optional:
     * * `boolean`                 **force**        - Optional:
     * * `InputBotInlineMessageID` **id**           -
     * * `InputUser`               **user_id**      -
     * * `int`                     **score**        -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setInlineGameScore($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**    -
     * * `int`       **id**      -
     * * `InputUser` **user_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.HighScores
     */
    public function getGameHighScores($params);

    /**
     *
     *
     * Parameters:
     * * `InputBotInlineMessageID` **id**      -
     * * `InputUser`               **user_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.HighScores
     */
    public function getInlineGameHighScores($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **user_id** -
     * * `long`      **max_id**  -
     * * `int`       **limit**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getCommonChats($params);

    /**
     *
     *
     * Parameters:
     * * `[long]` **except_ids** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getAllChats($params);

    /**
     *
     *
     * Parameters:
     * * `string` **url**  -
     * * `[int]`  **hash** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return WebPage
     */
    public function getWebPage($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`         **pinned** - Optional:
     * * `InputDialogPeer` **peer**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleDialogPin($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`           **force**     - Optional:
     * * `int`               **folder_id** -
     * * `[InputDialogPeer]` **order**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reorderPinnedDialogs($params);

    /**
     *
     *
     * Parameters:
     * * `int` **folder_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.PeerDialogs
     */
    public function getPinnedDialogs($params);

    /**
     *
     *
     * Parameters:
     * * `long`             **query_id**         -
     * * `string`           **error**            - Optional:
     * * `[ShippingOption]` **shipping_options** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotShippingResults($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **success**  - Optional:
     * * `long`    **query_id** -
     * * `string`  **error**    - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotPrecheckoutResults($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`  **peer**  -
     * * `InputMedia` **media** -.
     *
     * @param array $params Parameters
     *
     * @return MessageMedia
     */
    public function uploadMedia($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**            -
     * * `int`       **reply_to_msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendScreenshotNotification($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.FavedStickers
     */
    public function getFavedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `InputDocument` **id**     -
     * * `Bool`          **unfave** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function faveSticker($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `int`       **top_msg_id** - Optional:
     * * `int`       **offset_id**  -
     * * `int`       **add_offset** -
     * * `int`       **limit**      -
     * * `int`       **max_id**     -
     * * `int`       **min_id**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getUnreadMentions($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `int`       **top_msg_id** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function readMentions($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**  -
     * * `int`       **limit** -
     * * `long`      **hash**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getRecentLocations($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`            **silent**                   - Optional:
     * * `boolean`            **background**               - Optional:
     * * `boolean`            **clear_draft**              - Optional:
     * * `boolean`            **noforwards**               - Optional:
     * * `boolean`            **update_stickersets_order** - Optional:
     * * `InputPeer`          **peer**                     -
     * * `int`                **reply_to_msg_id**          - Optional:
     * * `int`                **top_msg_id**               - Optional:
     * * `[InputSingleMedia]` **multi_media**              -
     * * `int`                **schedule_date**            - Optional:
     * * `InputPeer`          **send_as**                  - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendMultiMedia($params);

    /**
     *
     *
     * Parameters:
     * * `InputEncryptedChat` **peer** -
     * * `InputEncryptedFile` **file** -.
     *
     * @param array $params Parameters
     *
     * @return EncryptedFile
     */
    public function uploadEncryptedFile($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **exclude_featured** - Optional:
     * * `string`  **q**                -
     * * `long`    **hash**             -.
     *
     * @param array $params Parameters
     *
     * @return messages.FoundStickerSets
     */
    public function searchStickerSets($params);

    /**
     *
     *
     * @return  of MessageRange[]
     */
    public function getSplitRanges();

    /**
     *
     *
     * Parameters:
     * * `boolean`         **unread** - Optional:
     * * `InputDialogPeer` **peer**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function markDialogUnread($params);

    /**
     *
     *
     * @return  of DialogPeer[]
     */
    public function getDialogUnreadMarks();

    /**
     *
     *
     * @return bool
     */
    public function clearAllDrafts();

    /**
     *
     *
     * Parameters:
     * * `boolean`   **silent**     - Optional:
     * * `boolean`   **unpin**      - Optional:
     * * `boolean`   **pm_oneside** - Optional:
     * * `InputPeer` **peer**       -
     * * `int`       **id**         -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function updatePinnedMessage($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**    -
     * * `int`       **msg_id**  -
     * * `[bytes]`   **options** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendVote($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getPollResults($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return ChatOnlines
     */
    public function getOnlines($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**  -
     * * `string`    **about** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function editChatAbout($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`        **peer**          -
     * * `ChatBannedRights` **banned_rights** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editChatDefaultBannedRights($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return EmojiKeywordsDifference
     */
    public function getEmojiKeywords($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_code**    -
     * * `int`    **from_version** -.
     *
     * @param array $params Parameters
     *
     * @return EmojiKeywordsDifference
     */
    public function getEmojiKeywordsDifference($params);

    /**
     *
     *
     * Parameters:
     * * `[string]` **lang_codes** -.
     *
     * @param array $params Parameters
     *
     * @return  of EmojiLanguage[]
     */
    public function getEmojiKeywordsLanguages($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return EmojiURL
     */
    public function getEmojiURL($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`        **peer**       -
     * * `int`              **top_msg_id** - Optional:
     * * `[MessagesFilter]` **filters**    -.
     *
     * @param array $params Parameters
     *
     * @return  of messages.SearchCounter[]
     */
    public function getSearchCounters($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**      - Optional:
     * * `int`       **msg_id**    - Optional:
     * * `int`       **button_id** - Optional:
     * * `string`    **url**       - Optional:.
     *
     * @param array $params Parameters
     *
     * @return UrlAuthResult
     */
    public function requestUrlAuth($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **write_allowed** - Optional:
     * * `InputPeer` **peer**          - Optional:
     * * `int`       **msg_id**        - Optional:
     * * `int`       **button_id**     - Optional:
     * * `string`    **url**           - Optional:.
     *
     * @param array $params Parameters
     *
     * @return UrlAuthResult
     */
    public function acceptUrlAuth($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function hidePeerSettingsBar($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `long`      **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getScheduledHistory($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getScheduledMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendScheduledMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteScheduledMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **id**     -
     * * `bytes`     **option** - Optional:
     * * `string`    **offset** - Optional:
     * * `int`       **limit**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.VotesList
     */
    public function getPollVotes($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`           **uninstall**   - Optional:
     * * `boolean`           **archive**     - Optional:
     * * `boolean`           **unarchive**   - Optional:
     * * `[InputStickerSet]` **stickersets** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleStickerSets($params);

    /**
     *
     *
     * @return  of DialogFilter[]
     */
    public function getDialogFilters();

    /**
     *
     *
     * @return  of DialogFilterSuggested[]
     */
    public function getSuggestedDialogFilters();

    /**
     *
     *
     * Parameters:
     * * `int`          **id**     -
     * * `DialogFilter` **filter** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateDialogFilter($params);

    /**
     *
     *
     * Parameters:
     * * `[int]` **order** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateDialogFiltersOrder($params);

    /**
     *
     *
     * Parameters:
     * * `int`  **offset** -
     * * `int`  **limit**  -
     * * `long` **hash**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.FeaturedStickers
     */
    public function getOldFeaturedStickers($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**        -
     * * `int`       **msg_id**      -
     * * `int`       **offset_id**   -
     * * `int`       **offset_date** -
     * * `int`       **add_offset**  -
     * * `int`       **limit**       -
     * * `int`       **max_id**      -
     * * `int`       **min_id**      -
     * * `long`      **hash**        -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getReplies($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.DiscussionMessage
     */
    public function getDiscussionMessage($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**        -
     * * `int`       **msg_id**      -
     * * `int`       **read_max_id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function readDiscussion($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `int`       **top_msg_id** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function unpinAllMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **chat_id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteChat($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **revoke** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedFoundMessages
     */
    public function deletePhoneCallHistory($params);

    /**
     *
     *
     * Parameters:
     * * `string` **import_head** -.
     *
     * @param array $params Parameters
     *
     * @return messages.HistoryImportParsed
     */
    public function checkHistoryImport($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**        -
     * * `InputFile` **file**        -
     * * `int`       **media_count** -.
     *
     * @param array $params Parameters
     *
     * @return messages.HistoryImport
     */
    public function initHistoryImport($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`  **peer**      -
     * * `long`       **import_id** -
     * * `string`     **file_name** -
     * * `InputMedia` **media**     -.
     *
     * @param array $params Parameters
     *
     * @return MessageMedia
     */
    public function uploadImportedMedia($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**      -
     * * `long`      **import_id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function startHistoryImport($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **revoked**     - Optional:
     * * `InputPeer` **peer**        -
     * * `InputUser` **admin_id**    -
     * * `int`       **offset_date** - Optional:
     * * `string`    **offset_link** - Optional:
     * * `int`       **limit**       -.
     *
     * @param array $params Parameters
     *
     * @return messages.ExportedChatInvites
     */
    public function getExportedChatInvites($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `string`    **link** -.
     *
     * @param array $params Parameters
     *
     * @return messages.ExportedChatInvite
     */
    public function getExportedChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **revoked**        - Optional:
     * * `InputPeer` **peer**           -
     * * `string`    **link**           -
     * * `int`       **expire_date**    - Optional:
     * * `int`       **usage_limit**    - Optional:
     * * `Bool`      **request_needed** - Optional:
     * * `string`    **title**          - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.ExportedChatInvite
     */
    public function editExportedChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**     -
     * * `InputUser` **admin_id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteRevokedExportedChatInvites($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `string`    **link** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deleteExportedChatInvite($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return messages.ChatAdminsWithInvites
     */
    public function getAdminsWithInvites($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **requested**   - Optional:
     * * `InputPeer` **peer**        -
     * * `string`    **link**        - Optional:
     * * `string`    **q**           - Optional:
     * * `int`       **offset_date** -
     * * `InputUser` **offset_user** -
     * * `int`       **limit**       -.
     *
     * @param array $params Parameters
     *
     * @return messages.ChatInviteImporters
     */
    public function getChatInviteImporters($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **period** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function setHistoryTTL($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return messages.CheckedHistoryImportPeer
     */
    public function checkHistoryImportPeer($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**     -
     * * `string`    **emoticon** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function setChatTheme($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return  of long[]
     */
    public function getMessageReadParticipants($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`      **peer**        -
     * * `MessagesFilter` **filter**      -
     * * `int`            **offset_id**   -
     * * `int`            **offset_date** -.
     *
     * @param array $params Parameters
     *
     * @return messages.SearchResultsCalendar
     */
    public function getSearchResultsCalendar($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`      **peer**      -
     * * `MessagesFilter` **filter**    -
     * * `int`            **offset_id** -
     * * `int`            **limit**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.SearchResultsPositions
     */
    public function getSearchResultsPositions($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **approved** - Optional:
     * * `InputPeer` **peer**     -
     * * `InputUser` **user_id**  -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function hideChatJoinRequest($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **approved** - Optional:
     * * `InputPeer` **peer**     -
     * * `string`    **link**     - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function hideAllChatJoinRequests($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**    -
     * * `Bool`      **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleNoForwards($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**    -
     * * `InputPeer` **send_as** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveDefaultSendAs($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`    **big**           - Optional:
     * * `boolean`    **add_to_recent** - Optional:
     * * `InputPeer`  **peer**          -
     * * `int`        **msg_id**        -
     * * `[Reaction]` **reaction**      - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendReaction($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getMessagesReactions($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**     -
     * * `int`       **id**       -
     * * `Reaction`  **reaction** - Optional:
     * * `string`    **offset**   - Optional:
     * * `int`       **limit**    -.
     *
     * @param array $params Parameters
     *
     * @return messages.MessageReactionsList
     */
    public function getMessageReactionsList($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer`     **peer**                -
     * * `ChatReactions` **available_reactions** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function setChatAvailableReactions($params);

    /**
     *
     *
     * Parameters:
     * * `[int]` **hash** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AvailableReactions
     */
    public function getAvailableReactions($params);

    /**
     *
     *
     * Parameters:
     * * `Reaction` **reaction** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setDefaultReaction($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**      - Optional:
     * * `int`       **msg_id**    - Optional:
     * * `string`    **text**      - Optional:
     * * `string`    **from_lang** - Optional:
     * * `string`    **to_lang**   -.
     *
     * @param array $params Parameters
     *
     * @return messages.TranslatedText
     */
    public function translateText($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `int`       **top_msg_id** - Optional:
     * * `int`       **offset_id**  -
     * * `int`       **add_offset** -
     * * `int`       **limit**      -
     * * `int`       **max_id**     -
     * * `int`       **min_id**     -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getUnreadReactions($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `int`       **top_msg_id** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function readReactions($params);

    /**
     *
     *
     * Parameters:
     * * `string`         **q**      -
     * * `MessagesFilter` **filter** -
     * * `int`            **limit**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function searchSentMedia($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return AttachMenuBots
     */
    public function getAttachMenuBots($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **bot** -.
     *
     * @param array $params Parameters
     *
     * @return AttachMenuBotsBot
     */
    public function getAttachMenuBot($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **write_allowed** - Optional:
     * * `InputUser` **bot**           -
     * * `Bool`      **enabled**       -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleBotInAttachMenu($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **from_bot_menu**   - Optional:
     * * `boolean`   **silent**          - Optional:
     * * `InputPeer` **peer**            -
     * * `InputUser` **bot**             -
     * * `string`    **url**             - Optional:
     * * `string`    **start_param**     - Optional:
     * * `DataJSON`  **theme_params**    - Optional:
     * * `string`    **platform**        -
     * * `int`       **reply_to_msg_id** - Optional:
     * * `int`       **top_msg_id**      - Optional:
     * * `InputPeer` **send_as**         - Optional:.
     *
     * @param array $params Parameters
     *
     * @return WebViewResult
     */
    public function requestWebView($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **silent**          - Optional:
     * * `InputPeer` **peer**            -
     * * `InputUser` **bot**             -
     * * `long`      **query_id**        -
     * * `int`       **reply_to_msg_id** - Optional:
     * * `int`       **top_msg_id**      - Optional:
     * * `InputPeer` **send_as**         - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function prolongWebView($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **bot**          -
     * * `string`    **url**          -
     * * `DataJSON`  **theme_params** - Optional:
     * * `string`    **platform**     -.
     *
     * @param array $params Parameters
     *
     * @return SimpleWebViewResult
     */
    public function requestSimpleWebView($params);

    /**
     *
     *
     * Parameters:
     * * `string`               **bot_query_id** -
     * * `InputBotInlineResult` **result**       -.
     *
     * @param array $params Parameters
     *
     * @return WebViewMessageSent
     */
    public function sendWebViewResultMessage($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **bot**         -
     * * `string`    **button_text** -
     * * `string`    **data**        -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function sendWebViewData($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.TranscribedAudio
     */
    public function transcribeAudio($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**             -
     * * `int`       **msg_id**           -
     * * `long`      **transcription_id** -
     * * `Bool`      **good**             -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function rateTranscribedAudio($params);

    /**
     *
     *
     * Parameters:
     * * `[long]` **document_id** -.
     *
     * @param array $params Parameters
     *
     * @return  of Document[]
     */
    public function getCustomEmojiDocuments($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AllStickers
     */
    public function getEmojiStickers($params);

    /**
     *
     *
     * Parameters:
     * * `long` **hash** -.
     *
     * @param array $params Parameters
     *
     * @return messages.FeaturedStickers
     */
    public function getFeaturedEmojiStickers($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**          -
     * * `int`       **id**            -
     * * `InputPeer` **reaction_peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportReaction($params);

    /**
     *
     *
     * Parameters:
     * * `int`  **limit** -
     * * `long` **hash**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.Reactions
     */
    public function getTopReactions($params);

    /**
     *
     *
     * Parameters:
     * * `int`  **limit** -
     * * `long` **hash**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.Reactions
     */
    public function getRecentReactions($params);

    /**
     *
     *
     * @return bool
     */
    public function clearRecentReactions();

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -
     * * `[int]`     **id**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getExtendedMedia($params);

    /**
     *
     *
     * Parameters:
     * * `int` **period** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setDefaultHistoryTTL($params);

    /**
     *
     *
     * @return DefaultHistoryTTL
     */
    public function getDefaultHistoryTTL();
}

interface updates
{
    /**
     *
     *
     * @return updates.State
     */
    public function getState();

    /**
     *
     *
     * Parameters:
     * * `int` **pts**             -
     * * `int` **pts_total_limit** - Optional:
     * * `int` **date**            -
     * * `int` **qts**             -.
     *
     * @param array $params Parameters
     *
     * @return updates.Difference
     */
    public function getDifference($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`               **force**   - Optional:
     * * `InputChannel`          **channel** -
     * * `ChannelMessagesFilter` **filter**  -
     * * `int`                   **pts**     -
     * * `int`                   **limit**   -.
     *
     * @param array $params Parameters
     *
     * @return updates.ChannelDifference
     */
    public function getChannelDifference($params);
}

interface photos
{
    /**
     *
     *
     * Parameters:
     * * `boolean`    **fallback** - Optional:
     * * `InputPhoto` **id**       -.
     *
     * @param array $params Parameters
     *
     * @return photos.Photo
     */
    public function updateProfilePhoto($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **fallback**       - Optional:
     * * `InputFile` **file**           - Optional:
     * * `InputFile` **video**          - Optional:
     * * `double`    **video_start_ts** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return photos.Photo
     */
    public function uploadProfilePhoto($params);

    /**
     *
     *
     * Parameters:
     * * `[InputPhoto]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return  of long[]
     */
    public function deletePhotos($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **user_id** -
     * * `int`       **offset**  -
     * * `long`      **max_id**  -
     * * `int`       **limit**   -.
     *
     * @param array $params Parameters
     *
     * @return photos.Photos
     */
    public function getUserPhotos($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **suggest**        - Optional:
     * * `boolean`   **save**           - Optional:
     * * `InputUser` **user_id**        -
     * * `InputFile` **file**           - Optional:
     * * `InputFile` **video**          - Optional:
     * * `double`    **video_start_ts** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return photos.Photo
     */
    public function uploadContactProfilePhoto($params);
}

interface upload
{
    /**
     *
     *
     * Parameters:
     * * `long`  **file_id**   -
     * * `int`   **file_part** -
     * * `bytes` **bytes**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveFilePart($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`           **precise**       - Optional:
     * * `boolean`           **cdn_supported** - Optional:
     * * `InputFileLocation` **location**      -
     * * `long`              **offset**        -
     * * `int`               **limit**         -.
     *
     * @param array $params Parameters
     *
     * @return upload.File
     */
    public function getFile($params);

    /**
     *
     *
     * Parameters:
     * * `long`  **file_id**          -
     * * `int`   **file_part**        -
     * * `int`   **file_total_parts** -
     * * `bytes` **bytes**            -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveBigFilePart($params);

    /**
     *
     *
     * Parameters:
     * * `InputWebFileLocation` **location** -
     * * `int`                  **offset**   -
     * * `int`                  **limit**    -.
     *
     * @param array $params Parameters
     *
     * @return upload.WebFile
     */
    public function getWebFile($params);

    /**
     *
     *
     * Parameters:
     * * `bytes` **file_token** -
     * * `long`  **offset**     -
     * * `int`   **limit**      -.
     *
     * @param array $params Parameters
     *
     * @return upload.CdnFile
     */
    public function getCdnFile($params);

    /**
     *
     *
     * Parameters:
     * * `bytes` **file_token**    -
     * * `bytes` **request_token** -.
     *
     * @param array $params Parameters
     *
     * @return  of FileHash[]
     */
    public function reuploadCdnFile($params);

    /**
     *
     *
     * Parameters:
     * * `bytes` **file_token** -
     * * `long`  **offset**     -.
     *
     * @param array $params Parameters
     *
     * @return  of FileHash[]
     */
    public function getCdnFileHashes($params);

    /**
     *
     *
     * Parameters:
     * * `InputFileLocation` **location** -
     * * `long`              **offset**   -.
     *
     * @param array $params Parameters
     *
     * @return  of FileHash[]
     */
    public function getFileHashes($params);
}

interface help
{
    /**
     *
     *
     * @return Config
     */
    public function getConfig();

    /**
     *
     *
     * @return NearestDc
     */
    public function getNearestDc();

    /**
     *
     *
     * Parameters:
     * * `string` **source** -.
     *
     * @param array $params Parameters
     *
     * @return help.AppUpdate
     */
    public function getAppUpdate($params);

    /**
     *
     *
     * @return help.InviteText
     */
    public function getInviteText();

    /**
     *
     *
     * @return help.Support
     */
    public function getSupport();

    /**
     *
     *
     * Parameters:
     * * `string` **prev_app_version** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function getAppChangelog($params);

    /**
     *
     *
     * Parameters:
     * * `int`    **pending_updates_count** -
     * * `string` **message**               -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotUpdatesStatus($params);

    /**
     *
     *
     * @return CdnConfig
     */
    public function getCdnConfig();

    /**
     *
     *
     * Parameters:
     * * `string` **referer** -.
     *
     * @param array $params Parameters
     *
     * @return help.RecentMeUrls
     */
    public function getRecentMeUrls($params);

    /**
     *
     *
     * @return help.TermsOfServiceUpdate
     */
    public function getTermsOfServiceUpdate();

    /**
     *
     *
     * Parameters:
     * * `DataJSON` **id** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function acceptTermsOfService($params);

    /**
     *
     *
     * Parameters:
     * * `string` **path** -.
     *
     * @param array $params Parameters
     *
     * @return help.DeepLinkInfo
     */
    public function getDeepLinkInfo($params);

    /**
     *
     *
     * @return JSONValue
     */
    public function getAppConfig();

    /**
     *
     *
     * Parameters:
     * * `[InputAppEvent]` **events** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveAppLog($params);

    /**
     *
     *
     * Parameters:
     * * `[int]` **hash** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return help.PassportConfig
     */
    public function getPassportConfig($params);

    /**
     *
     *
     * @return help.SupportName
     */
    public function getSupportName();

    /**
     *
     *
     * Parameters:
     * * `InputUser` **user_id** -.
     *
     * @param array $params Parameters
     *
     * @return help.UserInfo
     */
    public function getUserInfo($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser`       **user_id**  -
     * * `string`          **message**  -
     * * `[MessageEntity]` **entities** -.
     *
     * @param array $params Parameters
     *
     * @return help.UserInfo
     */
    public function editUserInfo($params);

    /**
     *
     *
     * @return help.PromoData
     */
    public function getPromoData();

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function hidePromoData($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**       -
     * * `string`    **suggestion** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function dismissSuggestion($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_code** -
     * * `[int]`  **hash**      - Optional:.
     *
     * @param array $params Parameters
     *
     * @return help.CountriesList
     */
    public function getCountriesList($params);

    /**
     *
     *
     * @return help.PremiumPromo
     */
    public function getPremiumPromo();
}

interface channels
{
    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `int`          **max_id**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function readHistory($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[int]`        **id**      -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedMessages
     */
    public function deleteMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**     -
     * * `InputPeer`    **participant** -
     * * `[int]`        **id**          -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportSpam($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`   **channel** -
     * * `[InputMessage]` **id**      -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`              **channel** -
     * * `ChannelParticipantsFilter` **filter**  -
     * * `int`                       **offset**  -
     * * `int`                       **limit**   -
     * * `long`                      **hash**    -.
     *
     * @param array $params Parameters
     *
     * @return channels.ChannelParticipants
     */
    public function getParticipants($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**     -
     * * `InputPeer`    **participant** -.
     *
     * @param array $params Parameters
     *
     * @return channels.ChannelParticipant
     */
    public function getParticipant($params);

    /**
     *
     *
     * Parameters:
     * * `[InputChannel]` **id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getChannels($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return messages.ChatFull
     */
    public function getFullChannel($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`       **broadcast**  - Optional:
     * * `boolean`       **megagroup**  - Optional:
     * * `boolean`       **for_import** - Optional:
     * * `string`        **title**      -
     * * `string`        **about**      -
     * * `InputGeoPoint` **geo_point**  - Optional:
     * * `string`        **address**    - Optional:
     * * `int`           **ttl_period** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function createChannel($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`    **channel**      -
     * * `InputUser`       **user_id**      -
     * * `ChatAdminRights` **admin_rights** -
     * * `string`          **rank**         -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editAdmin($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `string`       **title**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editTitle($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`   **channel** -
     * * `InputChatPhoto` **photo**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editPhoto($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `string`       **username** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function checkUsername($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `string`       **username** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function updateUsername($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function joinChannel($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function leaveChannel($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[InputUser]`  **users**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function inviteToChannel($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteChannel($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`      **grouped** - Optional:
     * * `boolean`      **thread**  - Optional:
     * * `InputChannel` **channel** -
     * * `int`          **id**      -.
     *
     * @param array $params Parameters
     *
     * @return ExportedMessageLink
     */
    public function exportMessageLink($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleSignatures($params);

    /**
     *
     *
     * Parameters:
     * * `boolean` **by_location** - Optional:
     * * `boolean` **check_limit** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getAdminedPublicChannels($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`     **channel**       -
     * * `InputPeer`        **participant**   -
     * * `ChatBannedRights` **banned_rights** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editBanned($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`                **channel**       -
     * * `string`                      **q**             -
     * * `ChannelAdminLogEventsFilter` **events_filter** - Optional:
     * * `[InputUser]`                 **admins**        - Optional:
     * * `long`                        **max_id**        -
     * * `long`                        **min_id**        -
     * * `int`                         **limit**         -.
     *
     * @param array $params Parameters
     *
     * @return channels.AdminLogResults
     */
    public function getAdminLog($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`    **channel**    -
     * * `InputStickerSet` **stickerset** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setStickers($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[int]`        **id**      -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function readMessageContents($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`      **for_everyone** - Optional:
     * * `InputChannel` **channel**      -
     * * `int`          **max_id**       -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteHistory($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function togglePreHistoryHidden($params);

    /**
     *
     *
     * Parameters:
     * * `int` **offset** -.
     *
     * @param array $params Parameters
     *
     * @return messages.Chats
     */
    public function getLeftChannels($params);

    /**
     *
     *
     * @return messages.Chats
     */
    public function getGroupsForDiscussion();

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **broadcast** -
     * * `InputChannel` **group**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setDiscussionGroup($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`          **channel**  -
     * * `InputUser`             **user_id**  -
     * * `InputCheckPasswordSRP` **password** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editCreator($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel`  **channel**   -
     * * `InputGeoPoint` **geo_point** -
     * * `string`        **address**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function editLocation($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `int`          **seconds** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleSlowMode($params);

    /**
     *
     *
     * @return messages.InactiveChats
     */
    public function getInactiveChannels();

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function convertToGigagroup($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function viewSponsoredMessage($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return messages.SponsoredMessages
     */
    public function getSponsoredMessages($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return channels.SendAsPeers
     */
    public function getSendAs($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**     -
     * * `InputPeer`    **participant** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function deleteParticipantHistory($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleJoinToSend($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleJoinRequest($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[string]`     **order**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reorderUsernames($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `string`       **username** -
     * * `Bool`         **active**   -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function toggleUsername($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function deactivateAllUsernames($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleForum($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**       -
     * * `string`       **title**         -
     * * `int`          **icon_color**    - Optional:
     * * `long`         **icon_emoji_id** - Optional:
     * * `InputPeer`    **send_as**       - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function createForumTopic($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**      -
     * * `string`       **q**            - Optional:
     * * `int`          **offset_date**  -
     * * `int`          **offset_id**    -
     * * `int`          **offset_topic** -
     * * `int`          **limit**        -.
     *
     * @param array $params Parameters
     *
     * @return messages.ForumTopics
     */
    public function getForumTopics($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `[int]`        **topics**  -.
     *
     * @param array $params Parameters
     *
     * @return messages.ForumTopics
     */
    public function getForumTopicsByID($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**       -
     * * `int`          **topic_id**      -
     * * `string`       **title**         - Optional:
     * * `long`         **icon_emoji_id** - Optional:
     * * `Bool`         **closed**        - Optional:
     * * `Bool`         **hidden**        - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editForumTopic($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**  -
     * * `int`          **topic_id** -
     * * `Bool`         **pinned**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function updatePinnedForumTopic($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**    -
     * * `int`          **top_msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return messages.AffectedHistory
     */
    public function deleteTopicHistory($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`      **force**   - Optional:
     * * `InputChannel` **channel** -
     * * `[int]`        **order**   -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function reorderPinnedForumTopics($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleAntiSpam($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `int`          **msg_id**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function reportAntiSpamFalsePositive($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel** -
     * * `Bool`         **enabled** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleParticipantsHidden($params);
}

interface bots
{
    /**
     *
     *
     * Parameters:
     * * `string`   **custom_method** -
     * * `DataJSON` **params**        -.
     *
     * @param array $params Parameters
     *
     * @return DataJSON
     */
    public function sendCustomRequest($params);

    /**
     *
     *
     * Parameters:
     * * `long`     **query_id** -
     * * `DataJSON` **data**     -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function answerWebhookJSONQuery($params);

    /**
     *
     *
     * Parameters:
     * * `BotCommandScope` **scope**     -
     * * `string`          **lang_code** -
     * * `[BotCommand]`    **commands**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotCommands($params);

    /**
     *
     *
     * Parameters:
     * * `BotCommandScope` **scope**     -
     * * `string`          **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function resetBotCommands($params);

    /**
     *
     *
     * Parameters:
     * * `BotCommandScope` **scope**     -
     * * `string`          **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return  of BotCommand[]
     */
    public function getBotCommands($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser`     **user_id** -
     * * `BotMenuButton` **button**  -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotMenuButton($params);

    /**
     *
     *
     * Parameters:
     * * `InputUser` **user_id** -.
     *
     * @param array $params Parameters
     *
     * @return BotMenuButton
     */
    public function getBotMenuButton($params);

    /**
     *
     *
     * Parameters:
     * * `ChatAdminRights` **admin_rights** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotBroadcastDefaultAdminRights($params);

    /**
     *
     *
     * Parameters:
     * * `ChatAdminRights` **admin_rights** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function setBotGroupDefaultAdminRights($params);
}

interface payments
{
    /**
     *
     *
     * Parameters:
     * * `InputInvoice` **invoice**      -
     * * `DataJSON`     **theme_params** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return payments.PaymentForm
     */
    public function getPaymentForm($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `int`       **msg_id** -.
     *
     * @param array $params Parameters
     *
     * @return payments.PaymentReceipt
     */
    public function getPaymentReceipt($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`              **save**    - Optional:
     * * `InputInvoice`         **invoice** -
     * * `PaymentRequestedInfo` **info**    -.
     *
     * @param array $params Parameters
     *
     * @return payments.ValidatedRequestedInfo
     */
    public function validateRequestedInfo($params);

    /**
     *
     *
     * Parameters:
     * * `long`                    **form_id**            -
     * * `InputInvoice`            **invoice**            -
     * * `string`                  **requested_info_id**  - Optional:
     * * `string`                  **shipping_option_id** - Optional:
     * * `InputPaymentCredentials` **credentials**        -
     * * `long`                    **tip_amount**         - Optional:.
     *
     * @param array $params Parameters
     *
     * @return payments.PaymentResult
     */
    public function sendPaymentForm($params);

    /**
     *
     *
     * @return payments.SavedInfo
     */
    public function getSavedInfo();

    /**
     *
     *
     * Parameters:
     * * `boolean` **credentials** - Optional:
     * * `boolean` **info**        - Optional:.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function clearSavedInfo($params);

    /**
     *
     *
     * Parameters:
     * * `string` **number** -.
     *
     * @param array $params Parameters
     *
     * @return payments.BankCardData
     */
    public function getBankCardData($params);

    /**
     *
     *
     * Parameters:
     * * `InputMedia` **invoice_media** -.
     *
     * @param array $params Parameters
     *
     * @return payments.ExportedInvoice
     */
    public function exportInvoice($params);

    /**
     *
     *
     * Parameters:
     * * `bytes`                    **receipt** -
     * * `InputStorePaymentPurpose` **purpose** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function assignAppStoreTransaction($params);

    /**
     *
     *
     * Parameters:
     * * `DataJSON`                 **receipt** -
     * * `InputStorePaymentPurpose` **purpose** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function assignPlayMarketTransaction($params);

    /**
     *
     *
     * Parameters:
     * * `InputStorePaymentPurpose` **purpose** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function canPurchasePremium($params);
}

interface stickers
{
    /**
     *
     *
     * Parameters:
     * * `boolean`               **masks**      - Optional:
     * * `boolean`               **animated**   - Optional:
     * * `boolean`               **videos**     - Optional:
     * * `InputUser`             **user_id**    -
     * * `string`                **title**      -
     * * `string`                **short_name** -
     * * `InputDocument`         **thumb**      - Optional:
     * * `[InputStickerSetItem]` **stickers**   -
     * * `string`                **software**   - Optional:.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function createStickerSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputDocument` **sticker** -.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function removeStickerFromSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputDocument` **sticker**  -
     * * `int`           **position** -.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function changeStickerPosition($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickerSet`     **stickerset** -
     * * `InputStickerSetItem` **sticker**    -.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function addStickerToSet($params);

    /**
     *
     *
     * Parameters:
     * * `InputStickerSet` **stickerset** -
     * * `InputDocument`   **thumb**      -.
     *
     * @param array $params Parameters
     *
     * @return messages.StickerSet
     */
    public function setStickerSetThumb($params);

    /**
     *
     *
     * Parameters:
     * * `string` **short_name** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function checkShortName($params);

    /**
     *
     *
     * Parameters:
     * * `string` **title** -.
     *
     * @param array $params Parameters
     *
     * @return stickers.SuggestedShortName
     */
    public function suggestShortName($params);
}

interface phone
{
    /**
     *
     *
     * @return DataJSON
     */
    public function getCallConfig();

    /**
     *
     *
     * Parameters:
     * * `boolean`           **video**    - Optional:
     * * `InputUser`         **user_id**  -
     * * `bytes`             **g_a_hash** -
     * * `PhoneCallProtocol` **protocol** -.
     *
     * @param array $params Parameters
     *
     * @return phone.PhoneCall
     */
    public function requestCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall`    **peer**     -
     * * `bytes`             **g_b**      -
     * * `PhoneCallProtocol` **protocol** -.
     *
     * @param array $params Parameters
     *
     * @return phone.PhoneCall
     */
    public function acceptCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall`    **peer**            -
     * * `bytes`             **g_a**             -
     * * `long`              **key_fingerprint** -
     * * `PhoneCallProtocol` **protocol**        -.
     *
     * @param array $params Parameters
     *
     * @return phone.PhoneCall
     */
    public function confirmCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function receivedCall($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`                **video**         - Optional:
     * * `InputPhoneCall`         **peer**          -
     * * `int`                    **duration**      -
     * * `PhoneCallDiscardReason` **reason**        -
     * * `long`                   **connection_id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function discardCall($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`        **user_initiative** - Optional:
     * * `InputPhoneCall` **peer**            -
     * * `int`            **rating**          -
     * * `string`         **comment**         -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function setCallRating($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall` **peer**  -
     * * `DataJSON`       **debug** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveCallDebug($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall` **peer** -
     * * `bytes`          **data** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function sendSignalingData($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`   **rtmp_stream**   - Optional:
     * * `InputPeer` **peer**          -
     * * `string`    **title**         - Optional:
     * * `int`       **schedule_date** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function createGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`        **muted**         - Optional:
     * * `boolean`        **video_stopped** - Optional:
     * * `InputGroupCall` **call**          -
     * * `InputPeer`      **join_as**       -
     * * `string`         **invite_hash**   - Optional:
     * * `DataJSON`       **params**        -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function joinGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**   -
     * * `int`            **source** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function leaveGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**  -
     * * `[InputUser]`    **users** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function inviteToGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function discardGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`        **reset_invite_hash** - Optional:
     * * `InputGroupCall` **call**              -
     * * `Bool`           **join_muted**        - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleGroupCallSettings($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**  -
     * * `int`            **limit** -.
     *
     * @param array $params Parameters
     *
     * @return phone.GroupCall
     */
    public function getGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**    -
     * * `[InputPeer]`    **ids**     -
     * * `[int]`          **sources** -
     * * `string`         **offset**  -
     * * `int`            **limit**   -.
     *
     * @param array $params Parameters
     *
     * @return phone.GroupParticipants
     */
    public function getGroupParticipants($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**    -
     * * `[int]`          **sources** -.
     *
     * @param array $params Parameters
     *
     * @return  of int[]
     */
    public function checkGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`        **start**          - Optional:
     * * `boolean`        **video**          - Optional:
     * * `InputGroupCall` **call**           -
     * * `string`         **title**          - Optional:
     * * `Bool`           **video_portrait** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleGroupCallRecord($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**                -
     * * `InputPeer`      **participant**         -
     * * `Bool`           **muted**               - Optional:
     * * `int`            **volume**              - Optional:
     * * `Bool`           **raise_hand**          - Optional:
     * * `Bool`           **video_stopped**       - Optional:
     * * `Bool`           **video_paused**        - Optional:
     * * `Bool`           **presentation_paused** - Optional:.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editGroupCallParticipant($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**  -
     * * `string`         **title** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editGroupCallTitle($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer** -.
     *
     * @param array $params Parameters
     *
     * @return phone.JoinAsPeers
     */
    public function getGroupCallJoinAs($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`        **can_self_unmute** - Optional:
     * * `InputGroupCall` **call**            -.
     *
     * @param array $params Parameters
     *
     * @return phone.ExportedGroupCallInvite
     */
    public function exportGroupCallInvite($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**       -
     * * `Bool`           **subscribed** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function toggleGroupCallStartSubscription($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function startScheduledGroupCall($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**    -
     * * `InputPeer` **join_as** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveDefaultGroupCallJoinAs($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call**   -
     * * `DataJSON`       **params** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function joinGroupCallPresentation($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function leaveGroupCallPresentation($params);

    /**
     *
     *
     * Parameters:
     * * `InputGroupCall` **call** -.
     *
     * @param array $params Parameters
     *
     * @return phone.GroupCallStreamChannels
     */
    public function getGroupCallStreamChannels($params);

    /**
     *
     *
     * Parameters:
     * * `InputPeer` **peer**   -
     * * `Bool`      **revoke** -.
     *
     * @param array $params Parameters
     *
     * @return phone.GroupCallStreamRtmpUrl
     */
    public function getGroupCallStreamRtmpUrl($params);

    /**
     *
     *
     * Parameters:
     * * `InputPhoneCall` **peer** -
     * * `InputFile`      **file** -.
     *
     * @param array $params Parameters
     *
     * @return bool
     */
    public function saveCallLog($params);
}

interface langpack
{
    /**
     *
     *
     * Parameters:
     * * `string` **lang_pack** -
     * * `string` **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return LangPackDifference
     */
    public function getLangPack($params);

    /**
     *
     *
     * Parameters:
     * * `string`   **lang_pack** -
     * * `string`   **lang_code** -
     * * `[string]` **keys**      -.
     *
     * @param array $params Parameters
     *
     * @return  of LangPackString[]
     */
    public function getStrings($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_pack**    -
     * * `string` **lang_code**    -
     * * `int`    **from_version** -.
     *
     * @param array $params Parameters
     *
     * @return LangPackDifference
     */
    public function getDifference($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_pack** -.
     *
     * @param array $params Parameters
     *
     * @return  of LangPackLanguage[]
     */
    public function getLanguages($params);

    /**
     *
     *
     * Parameters:
     * * `string` **lang_pack** -
     * * `string` **lang_code** -.
     *
     * @param array $params Parameters
     *
     * @return LangPackLanguage
     */
    public function getLanguage($params);
}

interface folders
{
    /**
     *
     *
     * Parameters:
     * * `[InputFolderPeer]` **folder_peers** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function editPeerFolders($params);

    /**
     *
     *
     * Parameters:
     * * `int` **folder_id** -.
     *
     * @param array $params Parameters
     *
     * @return Updates
     */
    public function deleteFolder($params);
}

interface stats
{
    /**
     *
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return stats.BroadcastStats
     */
    public function getBroadcastStats($params);

    /**
     *
     *
     * Parameters:
     * * `string` **token** -
     * * `long`   **x**     - Optional:.
     *
     * @param array $params Parameters
     *
     * @return StatsGraph
     */
    public function loadAsyncGraph($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional:
     * * `InputChannel` **channel** -.
     *
     * @param array $params Parameters
     *
     * @return stats.MegagroupStats
     */
    public function getMegagroupStats($params);

    /**
     *
     *
     * Parameters:
     * * `InputChannel` **channel**     -
     * * `int`          **msg_id**      -
     * * `int`          **offset_rate** -
     * * `InputPeer`    **offset_peer** -
     * * `int`          **offset_id**   -
     * * `int`          **limit**       -.
     *
     * @param array $params Parameters
     *
     * @return messages.Messages
     */
    public function getMessagePublicForwards($params);

    /**
     *
     *
     * Parameters:
     * * `boolean`      **dark**    - Optional:
     * * `InputChannel` **channel** -
     * * `int`          **msg_id**  -.
     *
     * @param array $params Parameters
     *
     * @return stats.MessageStats
     */
    public function getMessageStats($params);
}

class InternalDoc extends APIFactory
{
    /**
         * Convert MTProto parameters to bot API parameters.
         *
         * @param array $data Data
         */
    public function MTProtoToBotAPI(array $data)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($data);
    }
    /**
     * MTProto to TD params.
     *
     * @param mixed $params Params
     */
    public function MTProtoToTd(mixed &$params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * MTProto to TDCLI params.
     *
     * @param mixed $params Params
     */
    public function MTProtoToTdcli(mixed $params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Accept call.
     *
     * @param array $call Call
     */
    public function acceptCall(array $call)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($call);
    }
    /**
     * Accept secret chat.
     *
     * @param array $params Secret chat ID
     */
    public function acceptSecretChat(array $params): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Add user info.
     *
     * @param array $user User info
     */
    public function addUser(array $user): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($user);
    }
    /**
     * Create array.
     *
     * @param mixed ...$params Params
     */
    public static function arr(mixed ...$params): array
    {
        return \danog\MadelineProto\Tools::arr(...$params);
    }
    /**
     * base64URL decode.
     *
     * @param string $data Data to decode
     */
    public static function base64urlDecode(string $data): string
    {
        return \danog\MadelineProto\Tools::base64urlDecode($data);
    }
    /**
     * Base64URL encode.
     *
     * @param string $data Data to encode
     */
    public static function base64urlEncode(string $data): string
    {
        return \danog\MadelineProto\Tools::base64urlEncode($data);
    }
    /**
     * Convert bot API parameters to MTProto parameters.
     *
     * @param array $arguments Arguments
     */
    public function botAPIToMTProto(array $arguments)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($arguments);
    }
    /**
     * Login as bot.
     *
     * @param string $token Bot token
     */
    public function botLogin(string $token)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($token);
    }
    /**
     * Get call status.
     *
     * @param int $id Call ID
     */
    public function callStatus(int $id)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Close connection with client, connected via web.
     *
     * @param string $message Message
     */
    public static function closeConnection(string $message): void
    {
        \danog\MadelineProto\Tools::closeConnection($message);
    }
    /**
     * Complete 2FA login.
     *
     * @param string $password Password
     */
    public function complete2faLogin(string $password)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($password);
    }
    /**
     * Complete call handshake.
     *
     * @param array $params Params
     */
    public function completeCall(array $params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Complet user login using login code.
     *
     * @param string $code Login code
     */
    public function completePhoneLogin(string $code)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($code);
    }
    /**
     * Complete signup to Telegram.
     *
     * @param string $first_name First name
     * @param string $last_name  Last name
     */
    public function completeSignup(string $first_name, string $last_name = '')
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($first_name, $last_name);
    }
    /**
     * Confirm call.
     *
     * @param array $params Params
     */
    public function confirmCall(array $params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Connects to all datacenters and if necessary creates authorization keys, binds them and writes client info.
     *
     * @param boolean $reconnectAll Whether to reconnect to all DCs
     */
    public function connectToAllDcs(bool $reconnectAll = true): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($reconnectAll);
    }
    /**
     * Discard call.
     *
     * @param array   $call       Call
     * @param array   $rating     Rating
     * @param boolean $need_debug Need debug?
     */
    public function discardCall(array $call, array $reason, array $rating = [
    ], bool $need_debug = true)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($call, $reason, $rating, $need_debug);
    }
    /**
     * Discard secret chat.
     *
     * @param int $chat Secret chat ID
     */
    public function discardSecretChat(int $chat): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($chat);
    }
    /**
     * Download file to browser.
     *
     * Supports HEAD requests and content-ranges for parallel and resumed downloads.
     *
     * @param array|string|FileCallbackInterface $messageMedia File to download
     * @param null|callable     $cb           Status callback (can also use FileCallback)
     * @param null|int $size Size of file to download, required for bot API file IDs.
     * @param null|string $mime MIME type of file to download, required for bot API file IDs.
     * @param null|string $name Name of file to download, required for bot API file IDs.
     */
    public function downloadToBrowser(\danog\MadelineProto\FileCallbackInterface|array|string $messageMedia, ?callable $cb = null, ?int $size = null, ?string $name = null, ?string $mime = null): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $cb, $size, $name, $mime);
    }
    /**
     * Download file to callable.
     * The callable must accept two parameters: string $payload, int $offset
     * The callable will be called (possibly out of order, depending on the value of $seekable).
     *
     * @param mixed                          $messageMedia  File to download
     * @param callable|FileCallbackInterface $callable      Chunk callback
     * @param callable                       $cb            Status callback (DEPRECATED, use FileCallbackInterface)
     * @param bool                           $seekable      Whether the callable can be called out of order
     * @param int                            $offset        Offset where to start downloading
     * @param int                            $end           Offset where to stop downloading (inclusive)
     * @param int                            $part_size     Size of each chunk
     */
    public function downloadToCallable(mixed $messageMedia, callable $callable, ?callable $cb = null, bool $seekable = true, int $offset = 0, int $end = -1, ?int $part_size = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $callable, $cb, $seekable, $offset, $end, $part_size);
    }
    /**
     * Download file to directory.
     *
     * @param mixed                        $messageMedia File to download
     * @param string|FileCallbackInterface $dir           Directory where to download the file
     * @param callable                     $cb            Callback (DEPRECATED, use FileCallbackInterface)
     */
    public function downloadToDir(mixed $messageMedia, \danog\MadelineProto\FileCallbackInterface|string $dir, ?callable $cb = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $dir, $cb);
    }
    /**
     * Download file.
     *
     * @param mixed                        $messageMedia File to download
     * @param string|FileCallbackInterface $file          Downloaded file path
     * @param callable                     $cb            Callback (DEPRECATED, use FileCallbackInterface)
     */
    public function downloadToFile(mixed $messageMedia, \danog\MadelineProto\FileCallbackInterface|string $file, ?callable $cb = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $file, $cb);
    }
    /**
     * Download file to amphp/http-server response.
     *
     * Supports HEAD requests and content-ranges for parallel and resumed downloads.
     *
     * @param array|string|FileCallbackInterface  $messageMedia File to download
     * @param ServerRequest $request      Request
     * @param callable      $cb           Status callback (can also use FileCallback)
     * @param null|int          $size         Size of file to download, required for bot API file IDs.
     * @param null|string       $name         Name of file to download, required for bot API file IDs.
     * @param null|string       $mime         MIME type of file to download, required for bot API file IDs.
     */
    public function downloadToResponse(\danog\MadelineProto\FileCallbackInterface|array|string $messageMedia, \Amp\Http\Server\Request $request, ?callable $cb = null, ?int $size = null, ?string $mime = null, ?string $name = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $request, $cb, $size, $mime, $name);
    }
    /**
     * Download file to stream.
     *
     * @param mixed                       $messageMedia File to download
     * @param mixed|FileCallbackInterface|resource|WritableStream $stream        Stream where to download file
     * @param callable                    $cb            Callback (DEPRECATED, use FileCallbackInterface)
     * @param int                         $offset        Offset where to start downloading
     * @param int                         $end           Offset where to end download
     */
    public function downloadToStream(mixed $messageMedia, mixed $stream, ?callable $cb = null, int $offset = 0, int $end = -1)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia, $stream, $cb, $offset, $end);
    }
    /**
     * Asynchronously write to stdout/browser.
     *
     * @param string $string Message to echo
     */
    public static function echo(string $string): void
    {
        \danog\MadelineProto\AsyncTools::echo($string);
    }
    /**
     * Get final element of array.
     *
     * @param array $what Array
     */
    public static function end(array $what)
    {
        return \danog\MadelineProto\Tools::end($what);
    }
    /**
     * Export authorization.
     *
     */
    public function exportAuthorization()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Extract file info from bot API message.
     *
     * @param array $info Bot API message object
      * @return ?array
     */
    public static function extractBotAPIFile(array $info): ?array
    {
        return \danog\MadelineProto\MTProto::extractBotAPIFile($info);
    }
    /**
     * Extract a message constructor from an Updates constructor.
     */
    public function extractMessage(array $updates)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($updates);
    }
    /**
     * Extract a message ID from an Updates constructor.
     */
    public function extractMessageId(array $updates)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($updates);
    }
    /**
     * Extract an update message constructor from an Updates constructor.
     */
    public function extractMessageUpdate(array $updates)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($updates);
    }
    /**
     * Extract Update constructors from an Updates constructor.
     *
     */
    public function extractUpdates(array $updates)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($updates);
    }
    /**
     * Get contents of remote file asynchronously.
     *
     * @param string $url URL
     */
    public function fileGetContents(string $url)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($url);
    }
    /**
     * Asynchronously lock a file
     * Resolves with a callbable that MUST eventually be called in order to release the lock.
     *
     * @param string    $file      File to lock
     * @param integer   $operation Locking mode
     * @param float     $polling   Polling interval
     * @param ?Cancellation $token     Cancellation token
     * @param ?Closure $failureCb Failure callback, called only once if the first locking attempt fails.
     * @return ($token is null ? (Closure(): void) : ((Closure(): void)|null))
     */
    public static function flock(string $file, int $operation, float $polling = 0.1, ?\Amp\Cancellation $token = null, ?\Closure $failureCb = null): ?\Closure
    {
        return \danog\MadelineProto\AsyncTools::flock($file, $operation, $polling, $token, $failureCb);
    }
    /**
     * Convert bot API channel ID to MTProto channel ID.
     *
     * @param int $id Bot API channel ID
     */
    public static function fromSupergroup(int $id): int
    {
        return \danog\MadelineProto\MTProto::fromSupergroup($id);
    }
    /**
     * When were full info for this chat last cached.
     *
     * @param mixed $id Chat ID
     */
    public function fullChatLastUpdated(mixed $id)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Get info about the logged-in user, not cached.
     */
    public function fullGetSelf()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Generate MTProto vector hash.
     *
     * @param array $ints IDs
     * @return string Vector hash
     */
    public static function genVectorHash(array $ints): string
    {
        return \danog\MadelineProto\Tools::genVectorHash($ints);
    }
    /**
     * Get full list of MTProto and API methods.
     */
    public function getAllMethods()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get authorization info.
     */
    public function getAuthorization()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get cached server-side config.
     */
    public function getCachedConfig()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get call info.
     *
     * @param int $call Call ID
     */
    public function getCall(int $call)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($call);
    }
    /**
     * Store RSA keys for CDN datacenters.
     */
    public function getCdnConfig(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get cached (or eventually re-fetch) server-side config.
     *
     * @param array $config  Current config
     */
    public function getConfig(array $config = [
    ])
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($config);
    }
    /**
     * Get async DNS client.
     */
    public function getDNSClient()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get all datacenter connections.
     *
     */
    public function getDataCenterConnections()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get main DC ID.
     *
     */
    public function getDataCenterId()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get diffie-hellman configuration.
     */
    public function getDhConfig()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get dialog peers.
     *
     * @param boolean $force Whether to refetch all dialogs ignoring cache
     */
    public function getDialogs(bool $force = true)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($force);
    }
    /**
     * Get download info of file
     * Returns an array with the following structure:.
     *
     * `$info['ext']` - The file extension
     * `$info['name']` - The file name, without the extension
     * `$info['mime']` - The file mime type
     * `$info['size']` - The file size
     *
     * @param mixed $messageMedia File ID
     */
    public function getDownloadInfo(mixed $messageMedia)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($messageMedia);
    }
    /**
     * Get event handler.
     */
    public function getEventHandler()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get extension from file location.
     *
     * @param mixed  $location File location
     * @param string $default  Default extension
     */
    public static function getExtensionFromLocation(mixed $location, string $default): string
    {
        return \danog\MadelineProto\TL\Conversion\Extension::getExtensionFromLocation($location, $default);
    }
    /**
     * Get extension from mime type.
     *
     * @param string $mime MIME type
     */
    public static function getExtensionFromMime(string $mime): string
    {
        return \danog\MadelineProto\TL\Conversion\Extension::getExtensionFromMime($mime);
    }
    /**
     * Get info about file.
     *
     * @param mixed $constructor File ID
     */
    public function getFileInfo(mixed $constructor)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($constructor);
    }
    /**
     * Get folder ID from object.
     *
     * @param mixed $id Object
      * @return ?int
     */
    public static function getFolderId(mixed $id): ?int
    {
        return \danog\MadelineProto\MTProto::getFolderId($id);
    }
    /**
     * Get full info of all dialogs.
     *
     * @param boolean $force Whether to refetch all dialogs ignoring cache
     */
    public function getFullDialogs(bool $force = true)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($force);
    }
    /**
     * Get full info about peer, returns an FullInfo object.
     *
     * @param mixed $id Peer
     * @see https://docs.madelineproto.xyz/FullInfo.html
     */
    public function getFullInfo(mixed $id)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Get async HTTP client.
     */
    public function getHTTPClient()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get current password hint.
     */
    public function getHint()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get bot API ID from peer object.
     *
     * @param mixed $id Peer
     */
    public function getId(mixed $id)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Get info about peer, returns an Info object.
     *
     * @param mixed                $id        Peer
     * @param MTProto::INFO_TYPE_* $type      Whether to generate an Input*, an InputPeer or the full set of constructors
     * @see https://docs.madelineproto.xyz/Info.html
     * @return mixed
     *      InputPeer: array{_: string, user_id?: int, access_hash?: int, min?: bool, chat_id?: int, channel_id?: int},
     *      Peer: array{_: string, user_id?: int, chat_id?: int, channel_id?: int},
     *      DialogPeer: array{_: string, peer: array{_: string, user_id?: int, chat_id?: int, channel_id?: int}},
     *      NotifyPeer: array{_: string, peer: array{_: string, user_id?: int, chat_id?: int, channel_id?: int}},
     *      InputDialogPeer: array{_: string, peer: array{_: string, user_id?: int, access_hash?: int, min?: bool, chat_id?: int, channel_id?: int}},
     *      InputNotifyPeer: array{_: string, peer: array{_: string, user_id?: int, access_hash?: int, min?: bool, chat_id?: int, channel_id?: int}},
     *      bot_api_id: int|string,
     *      user_id?: int,
     *      chat_id?: int,
     *      channel_id?: int,
     *      InputUser?: array{_: string, user_id?: int, access_hash?: int, min?: bool},
     *      InputChannel?: array{_: string, channel_id: int, access_hash: int, min: bool},
     *      type: string
     * } : ($type is INFO_TYPE_ID ? int : array{_: string, user_id?: int, access_hash?: int, min?: bool, chat_id?: int, channel_id?: int}|array{_: string, user_id?: int, access_hash?: int, min?: bool}|array{_: string, channel_id: int, access_hash: int, min: bool}))
     */
    public function getInfo(mixed $id, int $type = \danog\MadelineProto\MTProto::INFO_TYPE_ALL)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id, $type);
    }
    /**
     * Get logger.
     */
    public function getLogger()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get TL namespaces.
     */
    public function getMethodNamespaces()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get namespaced methods (method => namespace).
     */
    public function getMethodsNamespaced()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get mime type from buffer.
     *
     * @param string $buffer Buffer
     */
    public static function getMimeFromBuffer(string $buffer): string
    {
        return \danog\MadelineProto\TL\Conversion\Extension::getMimeFromBuffer($buffer);
    }
    /**
     * Get mime type from file extension.
     *
     * @param string $extension File extension
     * @param string $default   Default mime type
     */
    public static function getMimeFromExtension(string $extension, string $default): string
    {
        return \danog\MadelineProto\TL\Conversion\Extension::getMimeFromExtension($extension, $default);
    }
    /**
     * Get mime type of file.
     *
     * @param string $file File
     */
    public static function getMimeFromFile(string $file): string
    {
        return \danog\MadelineProto\TL\Conversion\Extension::getMimeFromFile($file);
    }
    /**
     * Get download info of the propic of a user
     * Returns an array with the following structure:.
     *
     * `$info['ext']` - The file extension
     * `$info['name']` - The file name, without the extension
     * `$info['mime']` - The file mime type
     * `$info['size']` - The file size
     */
    public function getPropicInfo($data)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($data);
    }
    /**
     * Get PSR logger.
     */
    public function getPsrLogger()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get full info about peer (including full list of channel members), returns a Chat object.
     *
     * @param mixed $id Peer
     * @see https://docs.madelineproto.xyz/Chat.html
     */
    public function getPwrChat(mixed $id, bool $fullfetch = true)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id, $fullfetch);
    }
    /**
     * Get secret chat.
     *
     * @param array|int $chat Secret chat ID
     */
    public function getSecretChat(array|int $chat)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($chat);
    }
    /**
     * Get info about the logged-in user, cached.
     *
     * Use fullGetSelf to bypass the cache.
     */
    public function getSelf()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Return current settings.
     */
    public function getSettings()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get sponsored messages for channel.
     * This method will return an array of [sponsored message objects](https://docs.madelineproto.xyz/API_docs/constructors/sponsoredMessage.html).
     *
     * See [the API documentation](https://core.telegram.org/api/sponsored-messages) for more info on how to handle sponsored messages.
     *
     * @param int|string|array $peer Channel ID, or Update, or Message, or Peer.
     */
    public function getSponsoredMessages(array|string|int $peer)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($peer);
    }
    /**
     * Get TL serializer.
     */
    public function getTL()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Get updates.
     *
     * @param array{offset?: int, limit?: int, timeout?: float} $params Params
     */
    public function getUpdates(array $params = [
    ])
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Accesses a private variable from an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function getVar(object $obj, string $var)
    {
        return \danog\MadelineProto\Tools::getVar($obj, $var);
    }
    /**
     * Get a message to show to the user when starting the bot.
     */
    public function getWebMessage(string $message)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($message);
    }
    /**
     * Get web template.
     */
    public function getWebTemplate()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Checks whether all datacenters are authorized.
     */
    public function hasAllAuth()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Check if an event handler instance is present.
     */
    public function hasEventHandler()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Check if has report peers.
     */
    public function hasReportPeers()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Check whether secret chat exists.
     *
     * @param array|int $chat Secret chat ID
     */
    public function hasSecretChat(array|int $chat)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($chat);
    }
    /**
     * Checks private property exists in an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function hasVar(object $obj, string $var): bool
    {
        return \danog\MadelineProto\Tools::hasVar($obj, $var);
    }
    /**
     * Import authorization.
     *
     * @param array<int, string> $authorization Authorization info
     * @param int $mainDcID Main DC ID
     */
    public function importAuthorization(array $authorization, int $mainDcID)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($authorization, $mainDcID);
    }
    /**
     * Inflate stripped photosize to full JPG payload.
     *
     * @param string $stripped Stripped photosize
     * @return string JPG payload
     */
    public static function inflateStripped(string $stripped): string
    {
        return \danog\MadelineProto\Tools::inflateStripped($stripped);
    }
    /**
     * Initialize self-restart hack.
     */
    public function initSelfRestart(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Whether this is altervista.
     */
    public static function isAltervista(): bool
    {
        return \danog\MadelineProto\Tools::isAltervista();
    }
    /**
     * Check if is array or similar (traversable && countable && arrayAccess).
     *
     * @param mixed $var Value to check
     */
    public static function isArrayOrAlike(mixed $var): bool
    {
        return \danog\MadelineProto\Tools::isArrayOrAlike($var);
    }
    /**
     * Whether we're an IPC client instance.
     */
    public function isIpc()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Whether we're an IPC server process (as opposed to an event handler).
     */
    public function isIpcWorker()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Returns whether the current user is a premium user, cached.
     */
    public function isPremium()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Check whether provided bot API ID is a channel.
     *
     * @param int $id Bot API ID
     */
    public static function isSupergroup(int $id): bool
    {
        return \danog\MadelineProto\MTProto::isSupergroup($id);
    }
    /**
     * Logger.
     *
     * @param mixed  $param Parameter
     * @param int    $level Logging level
     * @param string $file  File where the message originated
     */
    public function logger(mixed $param, int $level = \danog\MadelineProto\Logger::NOTICE, string $file = ''): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($param, $level, $file);
    }
    /**
     * Escape string for markdown.
     *
     * @param string $hwat String to escape
     */
    public static function markdownEscape(string $hwat): string
    {
        return \danog\MadelineProto\StrTools::markdownEscape($hwat);
    }
    /**
     * Telegram UTF-8 multibyte split.
     *
     * @param string  $text   Text
     * @param integer $length Length
     * @return array<string>
     */
    public static function mbStrSplit(string $text, int $length): array
    {
        return \danog\MadelineProto\StrTools::mbStrSplit($text, $length);
    }
    /**
     * Get Telegram UTF-8 length of string.
     *
     * @param string $text Text
     */
    public static function mbStrlen(string $text): int
    {
        return \danog\MadelineProto\StrTools::mbStrlen($text);
    }
    /**
     * Telegram UTF-8 multibyte substring.
     *
     * @param string  $text   Text to substring
     * @param integer $offset Offset
     * @param null|int    $length Length
     */
    public static function mbSubstr(string $text, int $offset, ?int $length = null): string
    {
        return \danog\MadelineProto\StrTools::mbSubstr($text, $offset, $length);
    }
    /**
     * Call method and wait asynchronously for response.
     *
     * If the $aargs['noResponse'] is true, will not wait for a response.
     *
     * @param string            $method Method name
     * @param array|(callable(): array)             $args Arguments
     * @param array             $aargs  Additional arguments
     */
    public function methodCall(string $method, callable|array $args = [
    ], array $aargs = [
        'msg_id' => null,
    ])
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($method, $args, $aargs);
    }
    /**
     * Call method and make sure it is asynchronously sent.
     *
     * @param string            $method Method name
     * @param array|(callable(): array)             $args Arguments
     * @param array             $aargs  Additional arguments
     */
    public function methodCallWrite(string $method, callable|array $args = [
    ], array $aargs = [
        'msg_id' => null,
    ])
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($method, $args, $aargs);
    }
    /**
     * Escape method name.
     *
     * @param string $method Method name
     */
    public static function methodEscape(string $method): string
    {
        return \danog\MadelineProto\StrTools::methodEscape($method);
    }
    /**
     * Convert double to binary version.
     *
     * @param float $value Value to convert
     */
    public static function packDouble(float $value): string
    {
        return \danog\MadelineProto\Tools::packDouble($value);
    }
    /**
     * Convert integer to base256 signed int.
     *
     * @param integer $value Value to convert
     */
    public static function packSignedInt(int $value): string
    {
        return \danog\MadelineProto\Tools::packSignedInt($value);
    }
    /**
     * Convert integer to base256 long.
     *
     * @param int $value Value to convert
     */
    public static function packSignedLong(int $value): string
    {
        return \danog\MadelineProto\Tools::packSignedLong($value);
    }
    /**
     * Convert value to unsigned base256 int.
     *
     * @param int $value Value
     */
    public static function packUnsignedInt(int $value): string
    {
        return \danog\MadelineProto\Tools::packUnsignedInt($value);
    }
    /**
     * Check if peer is present in internal peer database.
     *
     * @param mixed $id Peer
     */
    public function peerIsset(mixed $id)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Login as user.
     *
     * @param string  $number   Phone number
     * @param integer $sms_type SMS type
     */
    public function phoneLogin(string $number, int $sms_type = 5)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($number, $sms_type);
    }
    /**
     * Positive modulo
     * Works just like the % (modulus) operator, only returns always a postive number.
     *
     * @param int $a A
     * @param int $b B
     * @return int Modulo
     */
    public static function posmod(int $a, int $b): int
    {
        return \danog\MadelineProto\Tools::posmod($a, $b);
    }
    /**
     * Get random string of specified length.
     *
     * @param integer $length Length
     * @return string Random string
     */
    public static function random(int $length): string
    {
        return \danog\MadelineProto\Tools::random($length);
    }
    /**
     * Get random integer.
     *
     * @param integer $modulus Modulus
     */
    public static function randomInt(int $modulus = 0): int
    {
        return \danog\MadelineProto\Tools::randomInt($modulus);
    }
    /**
     * Asynchronously read line.
     *
     * @param string $prompt Prompt
     */
    public static function readLine(string $prompt = ''): string
    {
        return \danog\MadelineProto\AsyncTools::readLine($prompt);
    }
    /**
     * Refresh full peer cache for a certain peer.
     *
     * @param mixed $id The peer to refresh
     */
    public function refreshFullPeerCache(mixed $id): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Refresh peer cache for a certain peer.
     *
     * @param mixed $id The peer to refresh
     */
    public function refreshPeerCache(mixed $id): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($id);
    }
    /**
     * Rekey secret chat.
     *
     * @param int $chat Secret chat to rekey
     */
    public function rekey(int $chat)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($chat);
    }
    /**
     * Report an error to the previously set peer.
     *
     * @param string $message   Error to report
     * @param string $parseMode Parse mode
     */
    public function report(string $message, string $parseMode = ''): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($message, $parseMode);
    }
    /**
     * Request VoIP call.
     *
     * @param mixed $user User
     */
    public function requestCall(mixed $user)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($user);
    }
    /**
     * Request secret chat.
     *
     * @param mixed $user User to start secret chat with
     */
    public function requestSecretChat(mixed $user)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($user);
    }
    /**
     * Reset the update state and fetch all updates from the beginning.
     */
    public function resetUpdateState(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Restart update loop.
     */
    public function restart(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * null-byte RLE decode.
     *
     * @param string $string Data to decode
     */
    public static function rleDecode(string $string): string
    {
        return \danog\MadelineProto\Tools::rleDecode($string);
    }
    /**
     * null-byte RLE encode.
     *
     * @param string $string Data to encode
     */
    public static function rleEncode(string $string): string
    {
        return \danog\MadelineProto\Tools::rleEncode($string);
    }
    /**
     * Get secret chat status.
     *
     * @param int $chat Chat ID
     */
    public function secretChatStatus(int $chat)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($chat);
    }
    /**
     * Set NOOP update handler, ignoring all updates.
     */
    public function setNoop(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Set peer(s) where to send errors occurred in the event loop.
     *
     * @param int|string|array<int|string> $userOrId Username(s) or peer ID(s)
     */
    public function setReportPeers(array|string|int $userOrId): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($userOrId);
    }
    /**
     * Sets a private variable in an object.
     *
     * @param object $obj Object
     * @param string $var Attribute name
     * @param mixed  $val Attribute value
     * @psalm-suppress InvalidScope
     * @access public
     */
    public static function setVar(object $obj, string $var, mixed &$val): void
    {
        \danog\MadelineProto\Tools::setVar($obj, $var, $val);
    }
    /**
     * Set web template.
     *
     * @param string $template Template
     */
    public function setWebTemplate(string $template): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($template);
    }
    /**
     * Set webhook update handler.
     *
     * @param string $webhookUrl Webhook URL
     */
    public function setWebhook(string $webhookUrl): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($webhookUrl);
    }
    /**
     * Setup logger.
     */
    public function setupLogger(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Asynchronously sleep.
     *
     * @param float $time Number of seconds to sleep for
     */
    public static function sleep(float $time): void
    {
        \danog\MadelineProto\AsyncTools::sleep($time);
    }
    /**
     * Log in to telegram (via CLI or web).
     */
    public function start()
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Stop update loop.
     */
    public function stop(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Subscribe to event handler updates for a channel/supergroup we're not a member of.
     *
     */
    public function subscribeToUpdates(mixed $channel)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($channel);
    }
    /**
     * Convert TD to MTProto parameters.
     *
     * @param array $params Parameters
     */
    public function tdToMTProto(array $params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Convert TD parameters to tdcli.
     *
     * @param mixed $params Parameters
     */
    public function tdToTdcli(mixed $params)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Convert tdcli parameters to tdcli.
     *
     * @param mixed $params Params
     * @param array $key    Key
     */
    public function tdcliToTd(&$params, ?array $key = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($params, $key);
    }
    /**
     * Convert to camelCase.
     *
     * @param string $input String
     */
    public static function toCamelCase(string $input): string
    {
        return \danog\MadelineProto\StrTools::toCamelCase($input);
    }
    /**
     * Convert to snake_case.
     *
     * @param string $input String
     */
    public static function toSnakeCase(string $input): string
    {
        return \danog\MadelineProto\StrTools::toSnakeCase($input);
    }
    /**
     * Convert MTProto channel ID to bot API channel ID.
     *
     * @param int $id MTProto channel ID
     */
    public static function toSupergroup(int $id): int
    {
        return \danog\MadelineProto\MTProto::toSupergroup($id);
    }
    /**
     * Escape type name.
     *
     * @param string $type String to escape
     */
    public static function typeEscape(string $type): string
    {
        return \danog\MadelineProto\StrTools::typeEscape($type);
    }
    /**
     * Unpack binary double.
     *
     * @param string $value Value to unpack
     */
    public static function unpackDouble(string $value): float
    {
        return \danog\MadelineProto\Tools::unpackDouble($value);
    }
    /**
     * Unpack bot API file ID.
     *
     * @param string $fileId Bot API file ID
     */
    public function unpackFileId(string $fileId)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($fileId);
    }
    /**
     * Unpack base256 signed int.
     *
     * @param string $value base256 int
     */
    public static function unpackSignedInt(string $value): int
    {
        return \danog\MadelineProto\Tools::unpackSignedInt($value);
    }
    /**
     * Unpack base256 signed long.
     *
     * @param string $value base256 long
     */
    public static function unpackSignedLong(string $value): int
    {
        return \danog\MadelineProto\Tools::unpackSignedLong($value);
    }
    /**
     * Unpack base256 signed long to string.
     *
     * @param string|int|array $value base256 long
     */
    public static function unpackSignedLongString(array|string|int $value): string
    {
        return \danog\MadelineProto\Tools::unpackSignedLongString($value);
    }
    /**
     * Unset event handler.
     *
     */
    public function unsetEventHandler(): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}();
    }
    /**
     * Update the 2FA password.
     *
     * The params array can contain password, new_password, email and hint params.
     *
     * @param array $params The params
     */
    public function update2fa(array $params): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($params);
    }
    /**
     * Parse, update and store settings.
     *
     * @param SettingsAbstract $settings Settings
     */
    public function updateSettings(\danog\MadelineProto\SettingsAbstract $settings): void
    {
        $this->wrapper->getAPI()->{__FUNCTION__}($settings);
    }
    /**
     * Upload file.
     *
     * @param FileCallbackInterface|string|array $file      File, URL or Telegram file to upload
     * @param string                             $fileName  File name
     * @param callable                           $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean                            $encrypted Whether to encrypt file for secret chats
     */
    public function upload(\danog\MadelineProto\FileCallbackInterface|array|string $file, string $fileName = '', ?callable $cb = null, bool $encrypted = false)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($file, $fileName, $cb, $encrypted);
    }
    /**
     * Upload file to secret chat.
     *
     * @param FileCallbackInterface|string|array $file      File, URL or Telegram file to upload
     * @param string                             $fileName  File name
     * @param callable                           $cb        Callback (DEPRECATED, use FileCallbackInterface)
     */
    public function uploadEncrypted(\danog\MadelineProto\FileCallbackInterface|array|string $file, string $fileName = '', ?callable $cb = null)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($file, $fileName, $cb);
    }
    /**
     * Upload file from callable.
     *
     * The callable must accept two parameters: int $offset, int $size
     * The callable must return a string with the contest of the file at the specified offset and size.
     *
     * @param mixed    $callable  Callable
     * @param integer  $size      File size
     * @param string   $mime      Mime type
     * @param string   $fileName  File name
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $seekable  Whether chunks can be fetched out of order
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     */
    public function uploadFromCallable(callable $callable, int $size, string $mime, string $fileName = '', ?callable $cb = null, bool $seekable = true, bool $encrypted = false)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($callable, $size, $mime, $fileName, $cb, $seekable, $encrypted);
    }
    /**
     * Upload file from stream.
     *
     * @param mixed    $stream    PHP resource or AMPHP async stream
     * @param integer  $size      File size
     * @param string   $mime      Mime type
     * @param string   $fileName  File name
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     */
    public function uploadFromStream(mixed $stream, int $size, string $mime, string $fileName = '', ?callable $cb = null, bool $encrypted = false)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($stream, $size, $mime, $fileName, $cb, $encrypted);
    }
    /**
     * Reupload telegram file.
     *
     * @param mixed    $media     Telegram file
     * @param callable $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean  $encrypted Whether to encrypt file for secret chats
     */
    public function uploadFromTgfile(mixed $media, ?callable $cb = null, bool $encrypted = false)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($media, $cb, $encrypted);
    }
    /**
     * Upload file from URL.
     *
     * @param string|FileCallbackInterface $url       URL of file
     * @param integer                      $size      Size of file
     * @param string                       $fileName  File name
     * @param callable                     $cb        Callback (DEPRECATED, use FileCallbackInterface)
     * @param boolean                      $encrypted Whether to encrypt file for secret chats
     */
    public function uploadFromUrl(\danog\MadelineProto\FileCallbackInterface|string $url, int $size = 0, string $fileName = '', ?callable $cb = null, bool $encrypted = false)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($url, $size, $fileName, $cb, $encrypted);
    }
    /**
     * Mark sponsored message as read.
     *
     * @param int|array $peer Channel ID, or Update, or Message, or Peer.
     * @param string|array{random_id: string} $message Random ID or sponsored message to mark as read.
     */
    public function viewSponsoredMessage(array|int $peer, array|string $message)
    {
        return $this->wrapper->getAPI()->{__FUNCTION__}($peer, $message);
    }
}
